C51 COMPILER V9.60.0.0   MAIN                                                              03/12/2025 14:04:08 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\main.c LARGE OMF2 OPTIMIZE(7,SPEED) BROWSE INCDIR(..\..\..\..\Library
                    -\Device\Include;..\..\..\..\Library\StdDriver\inc) DEBUG PRINT(.\LST\main.lst) TABS(2) OBJECT(.\Output\main.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2021 nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          #include "numicro_8051.h"
   7          
   8          #define EEPROM_ADDRESS          0xA0
   9          #define I2C_WR                     0
  10          #define I2C_RD                     1
  11          
  12          #define LOOP_SIZE                 10
  13          
  14          uint16_t Tx_Addr;
  15          uint8_t Tx_Dat;
  16          uint16_t Rx_Addr;
  17          uint8_t Rx_Dat;
  18          BIT Write_End_Flag;
  19          BIT Read_End_Flag;
  20          
  21          
  22          void (*I2C_Func)(void);
  23          
  24          /**
  25            * @brief     I2C interrupt vector.
  26            * @param[in] Vector 0x38 (6).
  27            * @return    None.
  28          */
  29          #if defined __C51__
  30          void I2C_ISR(void) interrupt 6
  31          #elif defined __SDCC__
              void I2C_ISR(void) __interrupt (6)
              #endif
  34          {
  35   1          I2C_Func();
  36   1      }
  37          
  38          /*========================================================================================================
             -*/
  39          void I2C0_Master_Tx_Isr(void)
  40          {
  41   1          static uint8_t addr_flag;
  42   1          static uint8_t count;
  43   1      
  44   1          SFRS_TMP = SFRS;              /* for SFRS page */
  45   1      
  46   1          SFRS = 0;
  47   1          printf ("\n I2C Transmit Interrupt" );
  48   1          printf("\n I2STAT = 0x%hx", I2STAT);
C51 COMPILER V9.60.0.0   MAIN                                                              03/12/2025 14:04:08 PAGE 2   

  49   1          switch (I2STAT)
  50   1          {
  51   2             /* Bus error */
  52   2             case 0x00: set_I2CON_STO; break;
  53   2              
  54   2            /* I2C start */
  55   2             case 0x08:
  56   2                  clr_I2CON_STA;
  57   2                  I2DAT = (EEPROM_ADDRESS | I2C_WR);
  58   2             break;
  59   2      
  60   2             /* Master Transmit Address ACK  */
  61   2             case 0x18:
  62   2                  I2DAT = HIBYTE(Rx_Addr);          //address high byte of I2C EEPROM
  63   2                  addr_flag = 1;
  64   2             break;
  65   2      
  66   2             /* Master Transmit Data ACK  */
  67   2             case 0x28:
  68   2                  if(addr_flag)
  69   2                  {
  70   3                      I2DAT = LOBYTE(Tx_Addr);      //address low byte of I2C EEPROM
  71   3                      addr_flag = 0;
  72   3                      count = 0;
  73   3                  }
  74   2                  else
  75   2                  {
  76   3                      if(count == 0)
  77   3                      {
  78   4                          I2DAT = Tx_Dat;
  79   4                          count++;
  80   4                      }
  81   3                      else
  82   3                      {
  83   4                          Write_End_Flag = 1;
  84   4                          set_I2CON_STO;
  85   4                      }
  86   3                  }
  87   2              break;
  88   2          }
  89   1      
  90   1          I2C0_SI_Check();
  91   1          //while(STO);
  92   1      
  93   1          if (SFRS_TMP)                 /* for SFRS page */
  94   1          {
  95   2            ENABLE_SFR_PAGE1;
  96   2          }
  97   1      }
  98          
  99          /*========================================================================================================
             -*/
 100          void I2C0_Master_Rx_Isr(void)
 101          {
 102   1          static uint8_t addr_flag;
 103   1          static uint8_t count;
 104   1          SFRS_TMP = SFRS;              /* for SFRS page */
 105   1      
 106   1          SFRS = 0;
 107   1          printf ("\n I2C Receive Interrupt" );
 108   1          printf("\n I2STAT = 0x%hx", I2STAT);
 109   1          switch (I2STAT)
C51 COMPILER V9.60.0.0   MAIN                                                              03/12/2025 14:04:08 PAGE 3   

 110   1          {
 111   2             /* Bus error */
 112   2             case 0x00: set_I2CON_STO; break;
 113   2      
 114   2            /* I2C start */
 115   2             case 0x08:
 116   2                  clr_I2CON_STA;
 117   2                  I2DAT = (EEPROM_ADDRESS | I2C_WR);
 118   2             break;
 119   2      
 120   2             /* Master Transmit Address ACK  */
 121   2             case 0x18:
 122   2                  I2DAT = HIBYTE(Rx_Addr);          //address high byte of I2C EEPROM
 123   2                  addr_flag = 1;
 124   2             break;
 125   2      
 126   2             /* Master Transmit Data ACK */ 
 127   2             case 0x28:
 128   2                  if(addr_flag)
 129   2                  {
 130   3                      I2DAT = LOBYTE(Rx_Addr);       //address low byte of I2C EEPROM
 131   3                      addr_flag = 0;
 132   3                      count = 0;
 133   3                  }
 134   2                  else
 135   2                  {
 136   3                      set_I2CON_STA;
 137   3                  }
 138   2             break;  
 139   2      
 140   2             /* Master Repeat Start  */
 141   2             case 0x10: 
 142   2                 clr_I2CON_STA;
 143   2                 I2DAT = (EEPROM_ADDRESS | I2C_RD);
 144   2             break;
 145   2      
 146   2            /* Master Receive Address ACK  */
 147   2             case 0x40:  set_I2CON_AA; break;
 148   2             
 149   2            /* Master Receive Data ACK  */
 150   2             case 0x50:
 151   2                  Rx_Dat = I2DAT;
 152   2                  set_I2CON_STO;
 153   2                  Read_End_Flag = 1;
 154   2             break;
 155   2          }
 156   1      
 157   1          I2C0_SI_Check();
 158   1          //while(STO);
 159   1      
 160   1          if (SFRS_TMP)                 /* for SFRS page */
 161   1          {
 162   2            ENABLE_SFR_PAGE1;
 163   2          }
 164   1      }
 165          
 166          
 167          //========================================================================================================
 168          BIT I2C0_Write(uint16_t u16I2Caddr, uint8_t u8I2Cdat)
 169          {
 170   1          uint32_t count;
 171   1          count = 0;
C51 COMPILER V9.60.0.0   MAIN                                                              03/12/2025 14:04:08 PAGE 4   

 172   1          Write_End_Flag = 0;
 173   1          I2C_Func = I2C0_Master_Tx_Isr;
 174   1          Tx_Addr = u16I2Caddr;
 175   1          Tx_Dat = u8I2Cdat;
 176   1      
 177   1          SFRS=0; printf ("\n Write n24LC64 data 0x%hx", u8I2Cdat);
 178   1          set_I2CON_STA;             /* Start transmit */
 179   1          while(1)
 180   1          {
 181   2              count++;
 182   2              if(Write_End_Flag == 1)
 183   2              {
 184   3                  return 1;
 185   3              }
 186   2              
 187   2              if(count > 100000)
 188   2              {
 189   3                  return 0;
 190   3              }
 191   2          }
 192   1      }
 193          
 194          /*========================================================================================================
             -*/
 195          BIT I2C0_Read(uint16_t u8I2Caddr, uint8_t *u8I2Cdat)
 196          {
 197   1          uint32_t  count;
 198   1          count = 0;
 199   1          Read_End_Flag = 0;
 200   1          I2C_Func = I2C0_Master_Rx_Isr;
 201   1          Rx_Addr = u8I2Caddr;
 202   1        
 203   1          SFRS=0; printf ("\n Receive data from n24LC64" );
 204   1          set_I2CON_STA; 
 205   1          
 206   1          while(1)
 207   1          {
 208   2              count++;
 209   2              if(Read_End_Flag == 1)
 210   2              {
 211   3                  *u8I2Cdat = Rx_Dat;
 212   3                  return 1;
 213   3              }
 214   2              
 215   2              if(count > 100000)
 216   2              {
 217   3                  return 0;
 218   3              }
 219   2          }
 220   1      }
 221          /*========================================================================================================
             -*/
 222          void Init_I2C(void)
 223          {
 224   1      
 225   1          MODIFY_HIRC(HIRC_24);
 226   1      
 227   1          /* Set I2C GPIO */
 228   1          P13_OPENDRAIN_MODE;          /* External pull high resister in circuit */
 229   1          P14_OPENDRAIN_MODE;          /* External pull high resister in circuit */
 230   1          set_P1S_3;                   /* Setting schmit tigger mode */
 231   1          set_P1S_4;                   /* Setting schmit tigger mode */
C51 COMPILER V9.60.0.0   MAIN                                                              03/12/2025 14:04:08 PAGE 5   

 232   1      
 233   1          /* Set I2C clock rate and enable, base on 24M i2c clock is 100k */
 234   1           I2C_Master_Open(24000000,100000);
 235   1          /* Set I2C Interrupt enable*/
 236   1           I2C_Interrupt(ENABLE);
 237   1           EA=1;
 238   1      }
 239          
 240          /*========================================================================================================
             -*/
 241          void main(void)
 242          {
 243   1          uint8_t dat;
 244   1        
 245   1      
 246   1          Enable_UART0_VCOM_printf_24M_115200();
 247   1          printf("\n I2C EEPROM intial...");
 248   1          Init_I2C();  
 249   1          
 250   1      
 251   1              if(I2C0_Write(0x0000, 0x55) == 1)
 252   1              {
 253   2                  Timer0_Delay(24000000,5,1000);
 254   2                  if(I2C0_Read(0x0000, &dat) == 1)
 255   2                  {
 256   3                      if(dat == 0x55)
 257   3                      {
 258   4                          SFRS=0; printf("\n EEPROM write and read Pass! ");
 259   4                      }
 260   3                      else
 261   3                      {
 262   4                          printf("\n FAIL! ");
 263   4                      }
 264   3                  }
 265   2              }
 266   1              I2C_Close(); 
 267   1                  
 268   1      
 269   1              while(1);
 270   1      
 271   1      }
 272          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    909    ----
   CONSTANT SIZE    =    184    ----
   XDATA SIZE       =     13      17
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
