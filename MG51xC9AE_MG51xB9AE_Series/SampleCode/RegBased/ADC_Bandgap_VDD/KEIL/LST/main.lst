C51 COMPILER V9.60.0.0   MAIN                                                              03/12/2025 14:03:14 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\main.c LARGE OMF2 OPTIMIZE(7,SPEED) BROWSE INCDIR(..\..\..\..\Library
                    -\Device\Include;..\..\..\..\Library\StdDriver\inc) DEBUG PRINT(.\LST\main.lst) TABS(2) OBJECT(.\Output\main.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* SPDX-License-Identifier: Apache-2.0                                                                    
             - */
   4          /* Copyright(c) 2023 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   5          /*                                                                                                        
             - */
   6          /*--------------------------------------------------------------------------------------------------------
             --*/
   7          #include "numicro_8051.h"
   8          
   9          #if defined __C51__
  10          double Bandgap_Voltage,VDD_Voltage; 
  11          #elif defined __ICC8051__
              double Bandgap_Voltage,VDD_Voltage; 
              #elif defined __SDCC__
              float  Bandgap_Voltage,VDD_Voltage;
              #endif
  16          
  17          /******************************************************************************
  18          The main C function.  Program execution starts
  19          here after stack initialization.
  20          ******************************************************************************/
  21          void main (void) 
  22          {
  23   1          uint16_t ADC_BG_Result;
  24   1      
  25   1          MODIFY_HIRC(HIRC_24);
  26   1          Enable_UART0_VCOM_printf_24M_115200();
  27   1          printf ("\n\r Test start ...");
  28   1      
  29   1      /* ADC sampling timing setting for Bandgap*/  
  30   1          ENABLE_ADC_BANDGAP;
  31   1          ADCCON1|=0x30;            /* clock divider */
  32   1          ADCCON2|=0x0E;            /* AQT time */
  33   1      /*start bandgap ADC */
  34   1          clr_ADCCON0_ADCF;
  35   1          set_ADCCON0_ADCS;
  36   1          while(ADCF == 0);
  37   1      /* ADC convert current Bandgap value */
  38   1          ADC_BG_Result = ADCRH<<4 ;
  39   1          ADC_BG_Result = ADC_BG_Result|(ADCRL&0x0F);
  40   1          DISABLE_ADC;              /*Disable ADCEN each time after ADC trig */
  41   1      
  42   1      /*                  VDD  Now                         READ_BANDGAP() VALUE              */
  43   1      /*    ------------------------------------- = ----------------------------------       */
  44   1      /*    3072mV(Storage value test condition)      NOW ADC Bandgap convert reuslt         */
  45   1            VDD_Voltage = ((float)READ_BANDGAP())/((float)ADC_BG_Result)*3072;
  46   1      
  47   1      /*            Bandgap real voltage                    READ_BANDGAP() VALUE             */
  48   1      /*    ------------------------------------- = ----------------------------------       */
C51 COMPILER V9.60.0.0   MAIN                                                              03/12/2025 14:03:14 PAGE 2   

  49   1      /*    3072mV(Storage value test condition)              4096(12bit ADC)                */
  50   1            Bandgap_Voltage = ((float)READ_BANDGAP())*3/4;
  51   1      
  52   1      /*printf result value */
  53   1      
  54   1      #if defined __SDCC__
                  printf_fast_f ("\n\r BG Voltage = %f", Bandgap_Voltage);
                  printf_tiny (" mV \r");
                  printf_fast_f ("\n\r VDD voltage = %f", VDD_Voltage);
                  printf_tiny (" mV \r");
              #else
  60   1          printf ("\n\r BG Voltage = %f", Bandgap_Voltage);
  61   1          printf (" mV \r");
  62   1          printf ("\n\r VDD voltage = %f", VDD_Voltage);
  63   1          printf (" mV \r");
  64   1      #endif
  65   1          while(1);
  66   1      
  67   1      }
  68          
  69          
  70          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    353    ----
   CONSTANT SIZE    =     63    ----
   XDATA SIZE       =      8       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
