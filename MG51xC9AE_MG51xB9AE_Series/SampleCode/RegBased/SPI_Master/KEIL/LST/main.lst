C51 COMPILER V9.60.0.0   MAIN                                                              03/12/2025 14:05:21 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\main.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\..\..\Library
                    -\Device\Include;..\..\..\..\Library\StdDriver\inc) DEBUG PRINT(.\LST\main.lst) TABS(2) OBJECT(.\Output\main.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* SPDX-License-Identifier: Apache-2.0                                                                    
             - */
   4          /* Copyright(c) 2023 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   5          /*                                                                                                        
             - */
   6          /*--------------------------------------------------------------------------------------------------------
             --*/
   7          #include "numicro_8051.h"
   8          
   9          #define  slave_interrupt
  10          
  11          /*--------------------------------------------------------------------------------------------------------
             --*/
  12          void SPI_Error(void)
  13          {
  14   1          printf ("\n SPI transfer error! ");
  15   1          while(1);                                       // SPI error
  16   1      }
  17          
  18          /*--------------------------------------------------------------------------------------------------------
             --*/
  19          void SPI_Initial(void)
  20          {      
  21   1          P15_QUASI_MODE;                                  // P15 (SS) Quasi mode
  22   1          P10_QUASI_MODE;                                  // P10 (SPCLK) Quasi mode
  23   1          P00_QUASI_MODE;                                  // P00 (MOSI) Quasi mode
  24   1          P01_QUASI_MODE;                                  // P01 (MISO) Quasi mode
  25   1          
  26   1          set_SPSR_DISMODF;                                // SS General purpose I/O ( No Mode Fault ) 
  27   1          clr_SPCR_SSOE;
  28   1         
  29   1          clr_SPCR_LSBFE;                                  // MSB first
  30   1      
  31   1          clr_SPCR_CPOL;                                   // The SPI clock is low in idle mode
  32   1          clr_SPCR_CPHA;                                   // The data is sample on the second edge of SPI clock
             - 
  33   1          
  34   1          set_SPCR_MSTR;                                   // SPI in Master mode 
  35   1          SPICLK_FSYS_DIV16;                                    // Select SPI clock 
  36   1          set_SPCR_SPIEN;                                  // Enable SPI function 
  37   1          clr_SPSR_SPIF;
  38   1      }
  39          /*--------------------------------------------------------------------------------------------------------
             --*/
  40          void Start_SPI_process(uint8_t *pu8MID, uint8_t *pu8DID)
  41          {
  42   1          SS = 0;
  43   1      
  44   1          Spi_Write_Byte(0x90);
C51 COMPILER V9.60.0.0   MAIN                                                              03/12/2025 14:05:21 PAGE 2   

  45   1          if(SPDR != 0x4E)
  46   1             SPI_Error(); 
  47   1      
  48   1      #ifdef slave_interrupt                      /* if slave is interrupt mode, add delay to wait */
  49   1          _delay_();                              /* remark #define slave interrupt for normal polling transmitt
             -ion */
  50   1      #endif
  51   1      
  52   1          Spi_Write_Byte(0x01);
  53   1          if(SPDR != 0x55)
  54   1             SPI_Error();
  55   1      
  56   1      #ifdef slave_interrupt
  57   1          _delay_();
  58   1      #endif
  59   1      
  60   1          Spi_Write_Byte(0x02);
  61   1          if(SPDR != 0x56)
  62   1             SPI_Error();
  63   1      
  64   1      #ifdef slave_interrupt
  65   1          _delay_();
  66   1      #endif
  67   1      
  68   1          Spi_Write_Byte(0x03);
  69   1          if(SPDR != 0x4F)
  70   1             SPI_Error();
  71   1      
  72   1      #ifdef slave_interrupt
  73   1          _delay_();
  74   1      #endif
  75   1      
  76   1          Spi_Write_Byte(0x04);
  77   1          if(SPDR != 0x54)
  78   1             SPI_Error();
  79   1      
  80   1      #ifdef slave_interrupt
  81   1          _delay_();
  82   1      #endif
  83   1      
  84   1         /* Slave Polling receive data*/
  85   1          *pu8MID = Spi_Read_Byte(0xFF);                             // Receive Slave 1st DATA from Slave
  86   1          *pu8DID = Spi_Read_Byte(0xFF);                             // Receive Slave 2nd DATA from Slave
  87   1      
  88   1          SS = 1;    
  89   1      }
  90          
  91          /******************************
  92            * @brief     Main loop.
  93            * @param[in] None.
  94            * @return    None.
  95          ******************************/
  96          void main(void)
  97          {
  98   1          uint8_t u8MID,u8DID;
  99   1      
 100   1          MODIFY_HIRC(HIRC_24);
 101   1          Enable_UART0_VCOM_printf_24M_115200();
 102   1      
 103   1          SPI_Initial();
 104   1          Start_SPI_process(&u8MID,&u8DID);
 105   1        
C51 COMPILER V9.60.0.0   MAIN                                                              03/12/2025 14:05:21 PAGE 3   

 106   1          if((u8MID != 0x4F)&&(u8DID != 0x4E))
 107   1              SPI_Error();
 108   1      
 109   1          printf ("\n SPI transfer done! ");
 110   1          while(1);                                    // SPI transmission finish and P0.6 flash
 111   1      }
 112          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    383    ----
   CONSTANT SIZE    =     45    ----
   XDATA SIZE       =   ----       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
