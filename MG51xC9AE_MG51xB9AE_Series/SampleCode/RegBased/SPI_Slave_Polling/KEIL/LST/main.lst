C51 COMPILER V9.60.0.0   MAIN                                                              03/12/2025 14:05:29 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\main.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\..\..\Library
                    -\Device\Include;..\..\..\..\Library\StdDriver\inc) DEBUG PRINT(.\LST\main.lst) TABS(2) OBJECT(.\Output\main.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* SPDX-License-Identifier: Apache-2.0                                                                    
             - */
   4          /* Copyright(c) 2023 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   5          /*                                                                                                        
             - */
   6          /*--------------------------------------------------------------------------------------------------------
             --*/
   7          #include "numicro_8051.h"
   8          
   9          uint8_t   u8Receive_Data[5];
  10          uint8_t   u8CNT;
  11          BIT       SPI_Send_Flag, SPI_Receive_Finish_Flag;
  12          
  13          #if defined __C51__
  14           const  uint8_t   u8Transmit_Data[5] = {0x4E, 0x55, 0x56, 0x4F, 0x54};
  15          
  16          #elif defined __ICC8051__
              __code const  uint8_t    u8Transmit_Data[5] = {0x4E, 0x55, 0x56, 0x4F, 0x54};
              
              #elif defined __SDCC__
              __code const  uint8_t    u8Transmit_Data[5] = {0x4E, 0x55, 0x56, 0x4F, 0x54};
              #endif
  22          
  23          /*--------------------------------------------------------------------------------------------------------
             -- */
  24          void SPI_Error(void)
  25          {
  26   1          while (1);
  27   1      }
  28          /*--------------------------------------------------------------------------------------------------------
             -- */
  29          void SPI_Initial(void)
  30          { 
  31   1          P15_QUASI_MODE;                            //P15 (SS) Quasi mode
  32   1          P10_QUASI_MODE;                            //P10(SPCLK) Quasi mode
  33   1          P00_QUASI_MODE;                            //P00 (MOSI) Quasi mode
  34   1          P01_QUASI_MODE;                            //P01 (MISO) Quasi mode;
  35   1      
  36   1          clr_SPCR_MSTR;                                   // SPI in Slave mode 
  37   1          clr_SPCR_LSBFE;                                  // MSB first 
  38   1      
  39   1          clr_SPCR_CPOL;                                   // The SPI clock is low in idle mode
  40   1          set_SPCR_CPHA;                                   // The data is sample on the second edge of SPI clock
             -     
  41   1             
  42   1          set_SPCR_SPIEN;                                  // Enable SPI function
  43   1          
  44   1          clr_SPSR_SPIF;                                   // Clear SPI flag
  45   1          SPDR = u8Transmit_Data[0];
C51 COMPILER V9.60.0.0   MAIN                                                              03/12/2025 14:05:29 PAGE 2   

  46   1      }
  47          
  48          /*--------------------------------------------------------------------------------------------------------
             -- */
  49          void Slave_Polling_Receive_Data(void)
  50          {
  51   1          u8Receive_Data[0] = Spi_Read_Byte(u8Transmit_Data[0]);
  52   1          u8Receive_Data[1] = Spi_Read_Byte(u8Transmit_Data[1]);
  53   1          u8Receive_Data[2] = Spi_Read_Byte(u8Transmit_Data[2]);
  54   1          u8Receive_Data[3] = Spi_Read_Byte(u8Transmit_Data[3]);
  55   1          u8Receive_Data[4] = Spi_Read_Byte(u8Transmit_Data[4]);
  56   1      }
  57          /*--------------------------------------------------------------------------------------------------------
             -- */
  58          void Slave_Polling_Send_Data(void)
  59          {
  60   1          SPI_Send_Flag = 1;
  61   1      
  62   1          Spi_Write_Byte(0x4F);
  63   1          Spi_Write_Byte(0x4E);
  64   1      
  65   1      }
  66          
  67          /******************************
  68            * @brief     Main loop.
  69            * @param[in] None.
  70            * @return    None.
  71          ******************************/
  72          void main(void)
  73          {
  74   1          MODIFY_HIRC(HIRC_24);
  75   1          SPI_Initial();
  76   1        /* Slave interrupt receive data */
  77   1          Slave_Polling_Receive_Data();           // Wait Slave receive data from master use the interrupt
  78   1      
  79   1        /* Slave interrupt receive data */
  80   1          Slave_Polling_Send_Data();                  // Slave transmit data to master
  81   1          set_SPSR_SPIF;
  82   1          SPDR = 0x00;
  83   1      
  84   1          if(u8Receive_Data[0] != 0x90)               // Receive 1st DATA form master 
  85   1              SPI_Error(); 
  86   1          if(u8Receive_Data[1] != 0x01)               // Receive 2nd DATA form master 
  87   1              SPI_Error();
  88   1          if(u8Receive_Data[2] != 0x02)               // Receive 3rd DATA form master 
  89   1              SPI_Error();
  90   1          if(u8Receive_Data[3] != 0x03)               // Receive 4th DATA form master 
  91   1              SPI_Error();
  92   1          if(u8Receive_Data[4] != 0x04)               // Receive 5th DATA form master 
  93   1              SPI_Error();
  94   1      
  95   1          while(1);                                    // SPI transmission finish
  96   1      }
  97          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    297    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     11    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.60.0.0   MAIN                                                              03/12/2025 14:05:29 PAGE 3   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
