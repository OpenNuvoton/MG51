C51 COMPILER V9.60.0.0   PWM                                                               03/12/2025 14:05:08 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN .\Output\pwm.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\..\..\Library\StdDriver\src\pwm.c LARGE OMF2 OPTIMIZE(7,SPEED) BRO
                    -WSE INCDIR(..\..\..\..\Library\Device\Include;..\..\..\..\Library\StdDriver\inc) DEBUG PRINT(.\LST\pwm.lst) TABS(2) OBJE
                    -CT(.\Output\pwm.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* SPDX-License-Identifier: Apache-2.0                                                                    
             - */
   4          /* Copyright(c) 2023 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   5          /*                                                                                                        
             - */
   6          /*--------------------------------------------------------------------------------------------------------
             --*/
   7          #include "numicro_8051.h"
   8          
   9           /**
  10           * @brief This function config PWM clock base
  11           * @param[in] u8PWMCLKSource PWM0 clock source from HIRC or TIMER1.
  12                             - \ref  PWM_FSYS
  13                             - \ref  PWM_TIMER1
  14           * @param[in] u8PWM0CLKDIV the divider value of PWM clock.  - \ref (1\2\4\8\16\32\64\128) 
  15           * @return none
  16           * @note        
  17           * @example PWM0_ClockSource(PWM0_HIRC,128);
  18           */
  19          void PWM0_ClockSource(uint8_t u8PWMCLKSource, uint8_t u8PWM0CLKDIV)
  20          {
  21   1          switch (u8PWMCLKSource)
  22   1          {
  23   2              case PWM_FSYS:  clr_CKCON_PWMCKS; break;
  24   2              case PWM_TIMER1: set_CKCON_PWMCKS; break;
  25   2          }
  26   1          switch (u8PWM0CLKDIV)
  27   1          {
  28   2              case 1:    PWM0_CLOCK_DIV_1; break;
  29   2              case 2:    PWM0_CLOCK_DIV_2; break;
  30   2              case 4:    PWM0_CLOCK_DIV_4; break;
  31   2              case 8:    PWM0_CLOCK_DIV_8; break;
  32   2              case 16:   PWM0_CLOCK_DIV_16; break;
  33   2              case 32:   PWM0_CLOCK_DIV_32; break;
  34   2              case 64:   PWM0_CLOCK_DIV_64; break;
  35   2              case 128:  PWM0_CLOCK_DIV_128; break;
  36   2          }
  37   1      }
  38          
  39           /**
  40           * @brief This function config PWM generator 
  41           * @param[in] u8ChannelNum PWM channel number. Valid values are between 0~5
  42           * @param[in] u8OPMode PWM run mode select from Independent, Complementary or Synchronized mode.
  43           * @param[in] u8PwmType select Edge-Aligned Type or Center-Aligned Type
  44           * @param[in] u32PWM0Frequency Target generator frequency, note the actually PWM period is 16bit value. fr
             -om 0x0000 ~ 0xFFFF
  45           * @param[in] u16DutyCycle Target generator duty cycle percentage. Valid range are between 0 ~ 100. 10 mea
             -ns 10%, 20 means 20%...
C51 COMPILER V9.60.0.0   PWM                                                               03/12/2025 14:05:08 PAGE 2   

  46           * @return none
  47           * @note  none       
  48           * @example PWM0_ConfigOutputChannel(0,Independent,EdgeAligned,0x6FF,10);
  49           */
  50          void PWM0_ConfigOutputChannel(uint8_t u8PWM0ChannelNum,
  51                                        uint8_t u8PWM0OPMode,
  52                                        uint8_t u8PWM0PwmType,
  53                                        uint16_t u16PWM0Frequency,
  54                                        uint16_t u16PWM0DutyCycle)
  55          {
  56   1        set_SFRS_SFRPAGE;
  57   1        switch (u8PWM0OPMode)
  58   1        {
  59   2            case Independent:    PWMCON1&=0x3F;break;
  60   2            case Complementary:  PWMCON1&=0x3F;PWMCON1|=0x40;break;
  61   2            case Synchronous:    PWMCON1&=0x3F;PWMCON1|=0x80;break;
  62   2        }
  63   1        switch (u8PWM0PwmType)
  64   1        {
  65   2            case EdgeAligned:    PWMCON1&=0xEF;break;
  66   2            case CenterAligned:  PWMCON1|=0x10;break;
  67   2        }
  68   1        switch (u8PWM0ChannelNum)
  69   1        {
  70   2            case 0:  PWM0H=(u16PWM0Frequency/100UL*u16PWM0DutyCycle)>>8;PWM0L=(u16PWM0Frequency/100UL*u16PWM0Dut
             -yCycle);break;
  71   2            case 1:  PWM1H=(u16PWM0Frequency/100UL*u16PWM0DutyCycle)>>8;PWM1L=(u16PWM0Frequency/100UL*u16PWM0Dut
             -yCycle);break;
  72   2            case 2:  PWM2H=(u16PWM0Frequency/100UL*u16PWM0DutyCycle)>>8;PWM2L=(u16PWM0Frequency/100UL*u16PWM0Dut
             -yCycle);break;
  73   2            case 3:  PWM3H=(u16PWM0Frequency/100UL*u16PWM0DutyCycle)>>8;PWM3L=(u16PWM0Frequency/100UL*u16PWM0Dut
             -yCycle);break;
  74   2            case 4:  PWM4H=(u16PWM0Frequency/100UL*u16PWM0DutyCycle)>>8;PWM4L=(u16PWM0Frequency/100UL*u16PWM0Dut
             -yCycle);break;
  75   2            case 5:  PWM5H=(u16PWM0Frequency/100UL*u16PWM0DutyCycle)>>8;PWM5L=(u16PWM0Frequency/100UL*u16PWM0Dut
             -yCycle);break;
  76   2        }
  77   1        PWMPH = u16PWM0Frequency>>8;
  78   1        PWMPL = u16PWM0Frequency;
  79   1        clr_SFRS_SFRPAGE;
  80   1      }
  81          
  82           /**
  83           * @brief This function config PWM generator 
  84           * @param[in] u8ChannelNum PWM channel number. Valid values are between 0~5
  85           * @param[in] u8OPMode PWM run mode select from Independent, Complementary or Synchronized mode.
  86           * @param[in] u8PwmType select Edge-Aligned Type or Center-Aligned Type
  87           * @param[in] u32PWM0Frequency Target generator frequency, note the actually PWM period is 16bit value. fr
             -om 0x0000 ~ 0xFFFF
  88           * @param[in] u16DutyCycle Target generator duty cycle percentage. Valid range are between 0 ~ 100. 10 mea
             -ns 10%, 20 means 20%...
  89           * @return none
  90           * @note  none       
  91           * @example PWM0_ChannelDuty(0,10);
  92           */
  93          void PWM0_ChannelDuty(uint8_t u8PWM0ChannelNum,
  94                                uint16_t u16PWM0DutyCycle)
  95          {
  96   1        uint16_t  u16PWM0Frequency;
  97   1      
  98   1        u16PWM0Frequency = (PWMPH<<8);
  99   1        u16PWM0Frequency |= PWMPL;
C51 COMPILER V9.60.0.0   PWM                                                               03/12/2025 14:05:08 PAGE 3   

 100   1        set_SFRS_SFRPAGE;
 101   1        switch (u8PWM0ChannelNum)
 102   1        {
 103   2            case 0:  PWM0H=(u16PWM0Frequency/100UL*u16PWM0DutyCycle)>>8;PWM0L=(u16PWM0Frequency/100UL*u16PWM0Dut
             -yCycle);break;
 104   2            case 1:  PWM1H=(u16PWM0Frequency/100UL*u16PWM0DutyCycle)>>8;PWM1L=(u16PWM0Frequency/100UL*u16PWM0Dut
             -yCycle);break;
 105   2            case 2:  PWM2H=(u16PWM0Frequency/100UL*u16PWM0DutyCycle)>>8;PWM2L=(u16PWM0Frequency/100UL*u16PWM0Dut
             -yCycle);break;
 106   2            case 3:  PWM3H=(u16PWM0Frequency/100UL*u16PWM0DutyCycle)>>8;PWM3L=(u16PWM0Frequency/100UL*u16PWM0Dut
             -yCycle);break;
 107   2            case 4:  PWM4H=(u16PWM0Frequency/100UL*u16PWM0DutyCycle)>>8;PWM4L=(u16PWM0Frequency/100UL*u16PWM0Dut
             -yCycle);break;
 108   2            case 5:  PWM5H=(u16PWM0Frequency/100UL*u16PWM0DutyCycle)>>8;PWM5L=(u16PWM0Frequency/100UL*u16PWM0Dut
             -yCycle);break;
 109   2        }
 110   1        clr_SFRS_SFRPAGE;
 111   1      }
 112          
 113           /**
 114           * @brief This function config PWM Complementary pair inset dead zone time 
 115           * @param[in] u8PWM0Pair PWM0 channel pair need insert pair define. (PWM0_CH01 / PWM0_CH23 / PWM0_CH45 / P
             -WM0_ALL) 
 116           * @param[in] u8PWM0DZValue the insert value.  PWM dead-time = (u8PWM0DZValue+1)/Fsys
 117           * @return none
 118           * @note        
 119           * @example PWM0_DeadZoneEnable(PWM0_CH01,0x55);
 120            */
 121          void PWM0_DeadZoneEnable(uint8_t u8PWM0Pair, uint16_t u16PWM0DZValue)
 122          {
 123   1          SFRS = 0x01;
 124   1          BYTE_TMP = 0;
 125   1          BYTE_TMP |= u16PWM0DZValue&0x0100>>4;
 126   1          switch (u8PWM0Pair)
 127   1          {
 128   2              case PWM0_CH01:  BYTE_TMP|=0x01; break;
 129   2              case PWM0_CH23:  BYTE_TMP|=0x02; break;
 130   2              case PWM0_CH45:  BYTE_TMP|=0x04; break;
 131   2              case PWM0_ALL:   BYTE_TMP|=0x07; break;
 132   2          }
 133   1          BIT_TMP=EA;EA=0;
 134   1          TA=0xAA;TA=0x55;PDTEN=BYTE_TMP;
 135   1          BYTE_TMP=u16PWM0DZValue&0x00FF;
 136   1          TA=0xAA;TA=0x55;PDTCNT=BYTE_TMP;
 137   1          EA=BIT_TMP;
 138   1      }
 139          
 140          /**
 141          * @brief This function disable all PWM Complementary pair inset dead zone time 
 142          * @param[in] none
 143          * @return none
 144          * @note        
 145          * @example PWM0_DeadZone_ALL_Disable();
 146          */
 147          void PWM0_DeadZone_ALL_Disable(void)
 148          {
 149   1          SFRS = 0x01;
 150   1          BIT_TMP=EA;EA=0;
 151   1          TA=0xAA;TA=0x55;
 152   1          PDTEN=0x00;
 153   1          EA=BIT_TMP;
 154   1      }
C51 COMPILER V9.60.0.0   PWM                                                               03/12/2025 14:05:08 PAGE 4   

 155              
 156          /**
 157          * @brief This function action all PWM run
 158          * @param[in] none
 159          * @return none
 160          * @note        
 161          * @example PWM0_RUN();
 162          */
 163          void PWM0_RUN(void)
 164          {
 165   1          set_PWMCON0_PWMRUN;
 166   1      }
 167          
 168          /**
 169          * @brief This function action all PWM stop run
 170          * @param[in] none
 171          * @return none
 172          * @note        
 173          * @example PWM0_RUN();
 174          */
 175          void PWM0_STOP(void)
 176          {
 177   1        clr_PWMCON0_PWMRUN;
 178   1      }
 179          
 180          /**
 181          * @brief This function action PWM value reload
 182          * @param[in] none
 183          * @return none
 184          * @note        
 185          * @example PWM0_Reload();
 186          */
 187          void PWM0_Reload(void)
 188          {
 189   1          set_PWMCON0_LOAD;
 190   1      }
 191          
 192          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1565    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
