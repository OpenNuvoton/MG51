C51 COMPILER V9.60.0.0   ISP_I2C                                                           03/12/2025 14:02:59 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE ISP_I2C
OBJECT MODULE PLACED IN .\Output\isp_i2c.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\isp_i2c.c LARGE OMF2 OPTIMIZE(7,SPEED) BROWSE INCDIR(..\..\..\..\Libr
                    -ary\Device\Include;..\..\..\..\Library\StdDriver\inc;..\include) DEBUG PRINT(.\LST\isp_i2c.lst) TABS(2) OBJECT(.\Output\
                    -isp_i2c.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* SPDX-License-Identifier: Apache-2.0                                                                    
             - */
   4          /* Copyright(c) 2023 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   5          /*                                                                                                        
             - */
   6          /*--------------------------------------------------------------------------------------------------------
             --*/
   7          #include "numicro_8051.h"
   8          #include "isp_i2c.h"
   9          
  10          #define   SDA   P04
  11          #define   SCL   P03
  12          #define  ADDR_SLA              0xC0 //0x60<<1
  13          
  14          BIT volatile bI2CDataReady;
  15          BIT volatile bISPDataReady;//for ack
  16          BIT volatile g_timer0Over;
  17          BIT volatile g_timer1Over;
  18          BIT volatile g_progarmflag;
  19          BIT BIT_TMP;
  20          
  21          #if defined __C51__
  22          xdata volatile uint8_t rx_buf[64];
  23          xdata volatile uint8_t tx_buf[64];
  24          data volatile uint16_t flash_address;
  25          data volatile uint16_t AP_size;
  26          data volatile uint8_t g_timer1Counter;
  27          data volatile uint8_t count;
  28          data volatile uint16_t g_timer0Counter;
  29          data volatile uint32_t g_checksum;
  30          data volatile uint32_t g_totalchecksum;
  31          data volatile uint8_t g_u8SlvDataLen;
  32          
  33          data uint8_t PID_highB,PID_lowB,DID_highB,DID_lowB,CONF0,CONF1,CONF2,CONF4;
  34          data uint8_t recv_CONF0,recv_CONF1,recv_CONF2,recv_CONF4;
  35          
  36          #elif defined __ICC8051__
              __xdata volatile uint8_t rx_buf[64];
              __xdata volatile uint8_t tx_buf[64];
              __data volatile uint16_t flash_address;
              __data volatile uint16_t AP_size;
              __data volatile uint8_t g_timer1Counter;
              __data volatile uint8_t count;
              __data volatile uint16_t g_timer0Counter;
              __data volatile uint32_t g_checksum;
              __data volatile uint32_t g_totalchecksum;
              __data volatile uint8_t g_u8SlvDataLen;
              
C51 COMPILER V9.60.0.0   ISP_I2C                                                           03/12/2025 14:02:59 PAGE 2   

              __data uint8_t PID_highB,PID_lowB,DID_highB,DID_lowB,CONF0,CONF1,CONF2,CONF4;
              __data uint8_t recv_CONF0,recv_CONF1,recv_CONF2,recv_CONF4;
              
              #elif defined __SDCC__
              __xdata volatile uint8_t rx_buf[64];
              __xdata volatile uint8_t tx_buf[64];
              __data volatile uint16_t flash_address;
              __data volatile uint16_t AP_size;
              __data volatile uint8_t g_timer1Counter;
              __data volatile uint8_t count;
              __data volatile uint16_t g_timer0Counter;
              __data volatile uint32_t g_checksum;
              __data volatile uint32_t g_totalchecksum;
              __data volatile uint8_t g_u8SlvDataLen;
              
              __data uint8_t PID_highB,PID_lowB,DID_highB,DID_lowB,CONF0,CONF1,CONF2,CONF4;
              __data uint8_t recv_CONF0,recv_CONF1,recv_CONF2,recv_CONF4;
              #endif
  66          
  67          void READ_ID(void)
  68          {
  69   1          set_CHPCON_IAPEN;
  70   1          IAPCN = READ_DID;
  71   1          IAPAH = 0x00;
  72   1          IAPAL = 0x00;
  73   1          trig_IAPGO;
  74   1          DID_lowB = IAPFD;
  75   1          IAPAL = 0x01;
  76   1          trig_IAPGO;
  77   1          DID_highB = IAPFD;
  78   1          IAPAL = 0x02;
  79   1          trig_IAPGO;
  80   1          PID_lowB = IAPFD;
  81   1          IAPAL = 0x03;
  82   1          trig_IAPGO;
  83   1          PID_highB = IAPFD;
  84   1      }
  85          void READ_CONFIG(void)
  86          {
  87   1          IAPCN = BYTE_READ_CONFIG;
  88   1          IAPAL = 0x00;
  89   1          IAPAH = 0x00;
  90   1          trig_IAPGO;
  91   1          CONF0 = IAPFD;
  92   1          IAPAL = 0x01;
  93   1          trig_IAPGO;
  94   1          CONF1 = IAPFD;
  95   1          IAPAL = 0x02;
  96   1          trig_IAPGO;
  97   1          CONF2 = IAPFD;
  98   1          IAPAL = 0x04;
  99   1          trig_IAPGO;
 100   1          CONF4 = IAPFD;
 101   1          clr_CHPCON_IAPEN;
 102   1      }
 103          
 104          void TM0_ini(void)
 105          {
 106   1        TH0=TL0=0;    //interrupt timer 140us
 107   1        set_TCON_TR0;      //Start timer0
 108   1        set_IPH_PSH;       // Serial port 0 interrupt level2
 109   1        set_IE_ET0;
C51 COMPILER V9.60.0.0   ISP_I2C                                                           03/12/2025 14:02:59 PAGE 3   

 110   1      }
 111          
 112          
 113          void Package_checksum(void)
 114          {
 115   1          uint8_t   vo8temp;
 116   1          
 117   1          g_checksum=0;
 118   1          for(count=0;count<64;count++)
 119   1          {
 120   2            vo8temp = rx_buf[count];
 121   2            g_checksum += vo8temp;
 122   2          }
 123   1          tx_buf[0]=g_checksum&0xff;
 124   1          tx_buf[1]=(g_checksum>>8)&0xff;
 125   1          tx_buf[4]=rx_buf[4]+1;
 126   1          tx_buf[5]=rx_buf[5];
 127   1          if(tx_buf[4]==0x00)
 128   1          tx_buf[5]++;
 129   1      
 130   1      }
 131          
 132          #if defined __C51__
 133          void Timer0_ISR (void) interrupt 1
 134          #elif defined __ICC8051__
              #pragma vector=0x0B
              __interrupt void Timer0_ISR(void)
              #elif defined __SDCC__
              void Timer0_ISR (void) __interrupt (1)
              #endif
 140          {
 141   1      if(g_timer0Counter)
 142   1        {
 143   2        g_timer0Counter--;
 144   2          if(!g_timer0Counter)
 145   2          {
 146   3          g_timer0Over=1;
 147   3          }
 148   2        }
 149   1      
 150   1        if(g_timer1Counter)
 151   1        {
 152   2        g_timer1Counter--;
 153   2          if(!g_timer1Counter)
 154   2          {
 155   3          g_timer1Over=1;
 156   3          }
 157   2        }
 158   1      }
 159          
 160          void Init_I2C(void)
 161          {
 162   1          P03_OPENDRAIN_MODE;                         //set SCL (P13) is Opendrain mode
 163   1          P04_OPENDRAIN_MODE;                         //set SDA (P14) is Opendrain mode
 164   1      
 165   1          SDA = 1;                                //set SDA and SCL pins high
 166   1          SCL = 1;
 167   1          set_EIE_EI2C;                               //enable I2C interrupt by setting IE1 bit 0
 168   1          set_I2CON_I2CEN;                              //enable I2C circuit
 169   1          I2ADDR = ADDR_SLA;                    // own slave address
 170   1          SI = 0;
 171   1          AA = 1;
C51 COMPILER V9.60.0.0   ISP_I2C                                                           03/12/2025 14:02:59 PAGE 4   

 172   1          EA=1;
 173   1      }
 174          
 175          #if defined __C51__
 176          void I2C_ISR(void) interrupt 6
 177          #elif defined __ICC8051__
              #pragma vector=0x33
              __interrupt void I2C_ISR(void)
              #elif defined __SDCC__
              void I2C_ISR(void) __interrupt (6)
              #endif
 183          {
 184   1          static uint8_t _bISPDataReady;
 185   1          uint8_t u8data;
 186   1          uint8_t vo8temp;
 187   1      
 188   1          if (I2STAT == 0x60) {                    /* Own SLA+W has been receive; ACK has been return */
 189   2              bI2CDataReady = 0;
 190   2              bISPDataReady = 0;
 191   2              g_u8SlvDataLen = 0;
 192   2              //I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI_AA);
 193   2              AA=1;
 194   2          } else if (I2STAT == 0x80)                 /* Previously address with own SLA address
 195   1                                                         Data has been received; ACK has been returned*/
 196   1          {
 197   2              vo8temp = I2DAT;
 198   2              rx_buf[g_u8SlvDataLen] = vo8temp;
 199   2              g_u8SlvDataLen++;
 200   2              g_u8SlvDataLen &= 0x3F;
 201   2              bI2CDataReady = (g_u8SlvDataLen == 0);
 202   2      
 203   2              if (g_u8SlvDataLen == 0x3F) {
 204   3                  //I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
 205   3              } else {
 206   3                  //I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI_AA);
 207   3                AA=1;
 208   3              }
 209   2          } else if (I2STAT == 0xA8) {             /* Own SLA+R has been receive; ACK has been return */
 210   2              g_u8SlvDataLen = 0;
 211   2              _bISPDataReady = bISPDataReady;
 212   2      
 213   2              if (_bISPDataReady == 0) {
 214   3                  u8data = 0xCC;
 215   3              } else {
 216   3                  u8data = tx_buf[g_u8SlvDataLen];
 217   3              }
 218   2      
 219   2      
 220   2              I2DAT=u8data;
 221   2              g_u8SlvDataLen++;
 222   2             // I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI_AA);
 223   2              AA=1;
 224   2          } else if (I2STAT == 0xB8) {
 225   2              if (_bISPDataReady == 0) {
 226   3                  u8data = 0xDD;
 227   3              } else {
 228   3                  u8data = tx_buf[g_u8SlvDataLen];
 229   3              }
 230   2      
 231   2      
 232   2              I2DAT=u8data;
 233   2              g_u8SlvDataLen++;
C51 COMPILER V9.60.0.0   ISP_I2C                                                           03/12/2025 14:02:59 PAGE 5   

 234   2              g_u8SlvDataLen &= 0x3F;
 235   2      
 236   2              if (g_u8SlvDataLen == 0x00) {
 237   3                 // I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
 238   3              } else {
 239   3                //  I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI_AA);
 240   3                AA=1;
 241   3              }
 242   2          } else if (I2STAT == 0xC8) {
 243   2             // I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI_AA);
 244   2            AA=1;
 245   2          } else if (I2STAT == 0xC0)                 /* Data byte or last data in I2CDAT has been transmitted
 246   1                                                         Not ACK has been received */
 247   1          {
 248   2             // I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI_AA);
 249   2            AA=1;
 250   2          } else if (I2STAT == 0x88)                 /* Previously addressed with own SLA address; NOT ACK has
 251   1                                                         been returned */
 252   1          {
 253   2              vo8temp = I2DAT;
 254   2              rx_buf[g_u8SlvDataLen] = vo8temp;
 255   2              g_u8SlvDataLen++;
 256   2              bI2CDataReady = (g_u8SlvDataLen == 64);
 257   2              g_u8SlvDataLen = 0;
 258   2            //  I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI_AA);
 259   2            AA=1;
 260   2          } else if (I2STAT == 0xA0)                 /* A STOP or repeated START has been received while still
 261   1                                                         addressed as Slave/Receiver*/
 262   1          {
 263   2              g_u8SlvDataLen = 0;
 264   2              //I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI_AA);
 265   2            AA=1;
 266   2          } else {
 267   2              /* TO DO */
 268   2              // printf("Status 0x%x is NOT processed\n", u32Status);
 269   2          }
 270   1          SI = 0;
 271   1      
 272   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    671    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    129    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     29    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      6    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
