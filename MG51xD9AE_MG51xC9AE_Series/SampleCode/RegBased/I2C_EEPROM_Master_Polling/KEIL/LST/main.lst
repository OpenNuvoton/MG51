C51 COMPILER V9.60.0.0   MAIN                                                              06/25/2024 11:40:38 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\main.c LARGE OMF2 OPTIMIZE(7,SPEED) BROWSE INCDIR(..\..\..\..\Library
                    -\Device\Include;..\..\..\..\Library\StdDriver\inc) DEBUG PRINT(.\LST\main.lst) TABS(2) OBJECT(.\Output\main.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* SPDX-License-Identifier: Apache-2.0                                                                    
             - */
   4          /* Copyright(c) 2024 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   5          /*                                                                                                        
             - */
   6          /*--------------------------------------------------------------------------------------------------------
             --*/
   7          #include "numicro_8051.h"
   8          
   9          #define SYS_DIV                 1
  10          #define I2C_CLOCK               14                  /* Setting I2C clock as 400K */
  11          
  12          #define EEPROM_SLA              0xA0
  13          #define EEPROM_WR               0
  14          #define EEPROM_RD               1
  15          
  16          #define LED                     P3
  17          #define EEPROM_PAGE_SIZE        32
  18          #define PAGE_NUMBER             4
  19          
  20          #define ERROR_CODE              0x78
  21          #define TEST_OK                 0x00
  22          
  23          BIT I2C_Reset_Flag;
  24          
  25          /************************************************
  26            * @brief     I2C initial setting.
  27            * @param[in] None.
  28            * @return    None.
  29          *************************************************/
  30          void Init_I2C(void)
  31          {
  32   1          P13_OPENDRAIN_MODE;          // Modify SCL pin to Open drain mode. don't forget the pull high resister
             - in circuit
  33   1          P14_OPENDRAIN_MODE;          // Modify SDA pin to Open drain mode. don't forget the pull high resister
             - in circuit
  34   1        
  35   1          /* Set I2C clock rate */
  36   1          I2CLK = I2C_CLOCK; 
  37   1      
  38   1          /* Enable I2C */
  39   1          set_I2CON_I2CEN;                                   
  40   1      }
  41          
  42          /************************************************
  43            * @brief     I2C SI check subroutine.
  44            * @param[in] None.
  45            * @return    None.
  46          *************************************************/
C51 COMPILER V9.60.0.0   MAIN                                                              06/25/2024 11:40:38 PAGE 2   

  47          void I2C_SI_Check(void)
  48          {
  49   1          if (I2STAT == 0x00)
  50   1          {
  51   2              I2C_Reset_Flag = 1;
  52   2              set_I2CON_STO;
  53   2              SI = 0;
  54   2              if(SI)
  55   2              {
  56   3                  clr_I2CON_I2CEN;
  57   3                  set_I2CON_I2CEN;
  58   3              }   
  59   2          }  
  60   1      }
  61          
  62          /************************************************
  63            * @brief     I2C write process.
  64            * @param[in] u8PageNumber, u8DAT .
  65            * @return    None.
  66          *************************************************/
  67          void One_Page_Read(uint8_t u8PageNumber,uint8_t u8DAT)
  68          {
  69   1          uint8_t  u8Count;
  70   1          uint16_t u16Address;
  71   1      
  72   1          u16Address = (uint16_t)u8PageNumber*32;
  73   1      
  74   1          /* Step1 */
  75   1          set_I2CON_STA;                                /* Send Start bit to I2C EEPROM */
  76   1          clr_I2CON_SI;
  77   1          while (!SI);
  78   1          if (I2STAT != 0x08)                     /* 0x08:  A START condition has been transmitted*/
  79   1          {
  80   2              I2C_Reset_Flag = 1;
  81   2              goto Read_Error_Stop;
  82   2          }
  83   1      
  84   1          /* Step2 */
  85   1          I2DAT = (EEPROM_SLA | EEPROM_WR);       /* Send (SLA+W) to EEPROM */
  86   1          clr_I2CON_STA;                                /* Clear STA and Keep SI value in I2CON */    
  87   1          clr_I2CON_SI;
  88   1          while (!SI);
  89   1          if (I2STAT != 0x18)                     /* 0x18: SLA+W has been transmitted; ACK has been received */ 
             -             
  90   1          {
  91   2              I2C_Reset_Flag = 1;
  92   2              goto Read_Error_Stop;
  93   2          }
  94   1      
  95   1          /* Step3 */
  96   1          I2DAT = HIBYTE(u16Address);             /* Send I2C EEPROM's High Byte Address */
  97   1          clr_I2CON_SI;
  98   1          while (!SI);
  99   1          if (I2STAT != 0x28)                     /* 0x28:  Data byte in S1DAT has been transmitted; ACK has bee
             -n received */              
 100   1          {
 101   2              I2C_Reset_Flag = 1;
 102   2              goto Read_Error_Stop;
 103   2          }
 104   1      
 105   1          /* Step4 */
 106   1          I2DAT = LOBYTE(u16Address);             /* Send I2C EEPROM's Low Byte Address */
C51 COMPILER V9.60.0.0   MAIN                                                              06/25/2024 11:40:38 PAGE 3   

 107   1          clr_I2CON_SI;
 108   1          while (!SI);
 109   1          if (I2STAT != 0x28)                     /* 0x28:  Data byte in S1DAT has been transmitted; ACK has bee
             -n received */             
 110   1          {
 111   2              I2C_Reset_Flag = 1;
 112   2              goto Read_Error_Stop;
 113   2          }
 114   1      
 115   1          /* Step5 */
 116   1          set_I2CON_STA;                                /* Repeated START */
 117   1          clr_I2CON_SI; 
 118   1          while (!SI);
 119   1          if (I2STAT != 0x10)                     /* 0x10: A repeated START condition has been transmitted */
 120   1          {
 121   2              I2C_Reset_Flag = 1;
 122   2              goto Read_Error_Stop;
 123   2          }
 124   1      
 125   1          /* Step6 */
 126   1          clr_I2CON_STA;                                /* Clear STA and Keep SI value in I2CON */
 127   1          I2DAT = (EEPROM_SLA | EEPROM_RD);       /* Send (SLA+R) to EEPROM */
 128   1          clr_I2CON_SI;
 129   1          while (!SI);
 130   1          if (I2STAT != 0x40)                     /* 0x40:  SLA+R has been transmitted; ACK has been received */
             -              
 131   1          {
 132   2              I2C_Reset_Flag = 1;
 133   2              goto Read_Error_Stop;
 134   2          }
 135   1      
 136   1          /* Step7 */                             /* Verify I2C EEPROM data */
 137   1          for (u8Count = 0; u8Count <EEPROM_PAGE_SIZE; u8Count++)
 138   1          {
 139   2              set_I2CON_AA;                             /* Set Assert Acknowledge Control Bit */
 140   2              clr_I2CON_SI;
 141   2              while (!SI);
 142   2              if (I2STAT != 0x50)                 /* 0x50:Data byte has been received; NOT ACK has been returned
             - */              
 143   2              {
 144   3                  I2C_Reset_Flag = 1;
 145   3                  goto Read_Error_Stop;
 146   3              }
 147   2             
 148   2              if (I2DAT != u8DAT)                 /* Send the Data to EEPROM */    
 149   2              {
 150   3                  I2C_Reset_Flag = 1;
 151   3                  goto Read_Error_Stop;
 152   3              }
 153   2              u8DAT = ~u8DAT; 
 154   2          }
 155   1      
 156   1          /* Step8 */
 157   1          clr_I2CON_AA;                                 /* Send a NACK to disconnect 24xx64 */
 158   1          clr_I2CON_SI;
 159   1          while (!SI);
 160   1          if (I2STAT != 0x58)                     /* 0x58:Data byte has been received; ACK has been returned */
 161   1          {
 162   2              I2C_Reset_Flag = 1;
 163   2              goto Read_Error_Stop;
 164   2          }
 165   1          
C51 COMPILER V9.60.0.0   MAIN                                                              06/25/2024 11:40:38 PAGE 4   

 166   1        /* Step9 */    
 167   1          clr_I2CON_SI;
 168   1          set_I2CON_STO;
 169   1          while (STO)                        /* Check STOP signal */
 170   1          {
 171   2            I2C_SI_Check();
 172   2            if (I2C_Reset_Flag)
 173   2              goto Read_Error_Stop;
 174   2          }
 175   1          
 176   1      Read_Error_Stop: 
 177   1          if (I2C_Reset_Flag)
 178   1          {
 179   2              I2C_SI_Check();
 180   2              printf("\nI2C Read error, test stop");
 181   2              I2C_Reset_Flag = 0;
 182   2          }
 183   1      }
 184          
 185          
 186          /************************************************
 187            * @brief     I2C write process.
 188            * @param[in] u8PageNumber, u8DAT .
 189            * @return    None.
 190          *************************************************/
 191          void One_Page_Write(uint8_t u8PageNumber,uint8_t u8DAT)
 192          {
 193   1        uint8_t  u8Count;
 194   1        uint16_t u16Address;
 195   1      
 196   1          u16Address = (uint16_t)u8PageNumber*32;
 197   1      
 198   1          /* Step1 */
 199   1          set_I2CON_STA;                                /* Send Start bit to I2C EEPROM */         
 200   1          clr_I2CON_SI;
 201   1          while (!SI);
 202   1          if (I2STAT != 0x08)                     /* 0x08:  A START condition has been transmitted*/
 203   1          {
 204   2              I2C_Reset_Flag = 1;
 205   2              goto Write_Error_Stop;
 206   2          }
 207   1      
 208   1          /* Step2 */
 209   1          clr_I2CON_STA;                                /* Clear STA and Keep SI value in I2CON */
 210   1          I2DAT = EEPROM_SLA | EEPROM_WR;         /* Send (SLA+W) to EEPROM */
 211   1          clr_I2CON_SI;
 212   1          while (!SI);
 213   1          if (I2STAT != 0x18)                     /* 0x18: SLA+W has been transmitted; ACK has been received */ 
             -            
 214   1          {
 215   2              I2C_Reset_Flag = 1;
 216   2              goto Write_Error_Stop;
 217   2          }
 218   1      
 219   1          /* Step3 */
 220   1          I2DAT = HIBYTE(u16Address);             /* Send EEPROM's High Byte Address */
 221   1          clr_I2CON_SI;
 222   1          while (!SI);
 223   1          if (I2STAT != 0x28)                     /* 0x28:  Data byte in S1DAT has been transmitted; ACK has bee
             -n received */
 224   1          {
 225   2              I2C_Reset_Flag = 1;
C51 COMPILER V9.60.0.0   MAIN                                                              06/25/2024 11:40:38 PAGE 5   

 226   2              goto Write_Error_Stop;
 227   2          }
 228   1      
 229   1          /* Step4 */
 230   1          I2DAT = LOBYTE(u16Address);             /* Send EEPROM's Low Byte Address */
 231   1          clr_I2CON_SI;
 232   1          while (!SI);
 233   1          if (I2STAT != 0x28)                     /* 0x28:  Data byte in S1DAT has been transmitted; ACK has bee
             -n received */
 234   1          {
 235   2              I2C_Reset_Flag = 1;
 236   2              goto Write_Error_Stop;
 237   2          }
 238   1      
 239   1          /* Step5 */
 240   1                                                  /* Write data to I2C EEPROM */
 241   1          for (u8Count = 0; u8Count < EEPROM_PAGE_SIZE; u8Count++)
 242   1          {
 243   2              I2DAT = u8DAT;                      /* Send data to EEPROM */
 244   2              clr_I2CON_SI;
 245   2              while (!SI);
 246   2              if (I2STAT != 0x28)                 /* 0x28:  Data byte in S1DAT has been transmitted; ACK has bee
             -n received */
 247   2              {
 248   3                  I2C_Reset_Flag = 1;
 249   3                  goto Write_Error_Stop;
 250   3              }   
 251   2              u8DAT = ~u8DAT;        
 252   2          }
 253   1                                                  //After STOP condition, a inner EEPROM timed-write-cycle 
 254   1                                                  //will occure and EEPROM will not response to outside command
 255   1                                                  /* 0x18: SLA+W has been transmitted; ACK has been received */
 256   1          /* Step6 */
 257   1          do
 258   1          {
 259   2              set_I2CON_STO;                            /* Set I2C STOP Control Bit */
 260   2              clr_I2CON_SI;
 261   2              while (STO)                        /* Check STOP signal */
 262   2              {
 263   3                I2C_SI_Check();
 264   3                if (I2C_Reset_Flag)
 265   3                  goto Write_Error_Stop;
 266   3              }
 267   2              
 268   2              set_I2CON_STA;                            /* Check if no ACK is returned by EEPROM, it is under ti
             -med-write cycle */
 269   2              clr_I2CON_SI;
 270   2              while (!SI);
 271   2              if (I2STAT != 0x08)                 /* 0x08:  A START condition has been transmitted*/
 272   2              {
 273   3                  I2C_Reset_Flag = 1;
 274   3                  goto Write_Error_Stop;
 275   3              }
 276   2      
 277   2              clr_I2CON_STA;                            /* Clear STA and Keep SI value in I2CON */
 278   2              I2DAT = (EEPROM_SLA | EEPROM_WR);   /* Send (SLA+W) to EEPROM */
 279   2              clr_I2CON_SI;
 280   2              while (!SI);
 281   2          }while(I2STAT != 0x18);
 282   1      
 283   1          /* Step7 */
 284   1          set_I2CON_STO;                                /* Set STOP Bit to I2C EEPROM */
C51 COMPILER V9.60.0.0   MAIN                                                              06/25/2024 11:40:38 PAGE 6   

 285   1          clr_I2CON_SI;
 286   1          while (STO)                        /* Check STOP signal */
 287   1          {
 288   2            I2C_SI_Check();
 289   2            if (I2C_Reset_Flag)
 290   2              goto Write_Error_Stop;
 291   2          }
 292   1          
 293   1      Write_Error_Stop: 
 294   1          if (I2C_Reset_Flag)
 295   1          {
 296   2              I2C_SI_Check();
 297   2              I2C_Reset_Flag  = 0;
 298   2              printf("\nI2C Write error, test stop");
 299   2          }
 300   1      }
 301          
 302          /************************************************
 303            * @brief     Main loop.
 304            * @param[in] None.
 305            * @return    None.
 306          *************************************************/
 307          void main(void)
 308          {
 309   1      
 310   1          MODIFY_HIRC(HIRC_24);
 311   1          Enable_UART0_VCOM_printf_24M_115200();
 312   1      
 313   1          /* Initial I2C function */
 314   1          Init_I2C();                                 //initial I2C circuit
 315   1          
 316   1          /* page0 R/W */
 317   1          printf ("\n\n24LC64 Page0 Write (0x55,0xAA...)...");
 318   1          One_Page_Write(0,0x55);                     //page0, write 0x55,0xAA,........
 319   1      
 320   1          printf ("\n\n24LC64 Page0 Read...");
 321   1          One_Page_Read (0,0x55);                     //page0, read  0x55,0xAA,........
 322   1      
 323   1          /* page1 R/W */
 324   1          printf ("\n\r n24LC64 Page1 Write (0x00,0xFF...)...");
 325   1          One_Page_Write(1,0x00);                     //page1, write 0x00,0xFF,........
 326   1          printf ("\n\r n24LC64 Page1 Read...");
 327   1          One_Page_Read (1,0x00);                     //page1, read  0x00,0xFF,........
 328   1      
 329   1          /* page2 R/W */
 330   1          printf ("\n\r n24LC64 Page2 Write (0xAA,0x55...)...");
 331   1          One_Page_Write(2,0xAA);                     //page2, write 0xAA,0x55,........
 332   1          printf ("\n\r n24LC64 Page2 Read...");
 333   1      
 334   1          One_Page_Read (2,0xAA);                     //page2, read  0xAA,0x55,........
 335   1      
 336   1          /* page3 R/W */
 337   1          printf ("\n\r n24LC64 Page3 Write (0xFF,0x00...)...");
 338   1          One_Page_Write(3,0xFF);                     //page3, write 0xFF,0x00,........
 339   1          printf ("\n\r n24LC64 Page3 Read...");
 340   1          One_Page_Read (3,0xFF);                     //page3, read  0xFF,0x00,........
 341   1      
 342   1          /* page255 R/W */
 343   1          printf ("\n\r n24LC64 Page255 Write (0x0F,0xF0...)...");
 344   1          One_Page_Write(255,0x0F);                   //page255, write 0x0F,0xF0,........
 345   1          printf ("\n\r n24LC64 Page255 Read...");
 346   1          One_Page_Read (255,0x0F);                   //page255, read  0x0F,0xF0,........
C51 COMPILER V9.60.0.0   MAIN                                                              06/25/2024 11:40:38 PAGE 7   

 347   1      
 348   1          /* ==== Test Pass ==== */      
 349   1          printf ("\n\r MG51 <--> 24LC64, I2C Demo Code test pass...");
 350   1      
 351   1          while (1);
 352   1      /* =================== */
 353   1      }
 354          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    655    ----
   CONSTANT SIZE    =    433    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
