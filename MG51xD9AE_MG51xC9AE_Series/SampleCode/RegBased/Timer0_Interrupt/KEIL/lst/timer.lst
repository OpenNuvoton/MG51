C51 COMPILER V9.60.0.0   TIMER                                                             06/25/2024 11:41:59 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\Output\timer.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\..\..\Library\StdDriver\src\timer.c LARGE OMF2 OPTIMIZE(8,SPEED) B
                    -ROWSE INCDIR(..\..\..\..\Library\Device\Include;..\..\..\..\Library\StdDriver\inc) DEBUG PRINT(.\lst\timer.lst) TABS(2) 
                    -OBJECT(.\Output\timer.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* SPDX-License-Identifier: Apache-2.0                                                                    
             - */
   4          /* Copyright(c) 2024 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   5          /*                                                                                                        
             - */
   6          /*--------------------------------------------------------------------------------------------------------
             --*/
   7          #include "numicro_8051.h"
   8          
   9          #if defined __C51__
  10          uint32_t data TIMER0CT,TIMER1CT,TIMER2CT,TIMER3CT;
  11          uint8_t data TH0TMP,TL0TMP,TH1TMP,TL1TMP;
  12          
  13          #elif defined __ICC8051__
              uint32_t __data TIMER0CT,TIMER1CT,TIMER2CT,TIMER3CT;
              uint8_t __data TH0TMP,TL0TMP,TH1TMP,TL1TMP;
              
              #elif defined __SDCC__
              uint32_t __data TIMER0CT,TIMER1CT,TIMER2CT,TIMER3CT;
              uint8_t __data TH0TMP,TL0TMP,TH1TMP,TL1TMP;
              #endif
  21          
  22          /**
  23            * @brief Timer0 delay interrupt initial setting and timer 0 interrupt vector 
  24            * @param[in] u8SYSCLK define Fsys clock value base on Fsys value.
  25            *                       - \ref 24 (HIRC 24MHz )
  26            *                       - \ref 16 (HIRC 16MHz)
  27            *                       - \ref 8  (MIRC 8MHz or HIRC with clock divider)
  28            * @param[in] u6DLYUnit define delay time base is (us). 
  29            *                       - \ref value range is 100 ~ 32768.   [100us ~ 32ms ] for 24MHz
  30            *                       - \ref value range is 100 ~ 65536.for 8MHz  (use MIRC) 
  31            *                       - \note The minimum delay value not less than 100us, the maxima value base on Fs
             -ys
  32            *                       - \example 6400 = 6.4ms.
  33            * @ref     Delay time max. value calculate = 65535 * DIV / Fsys 
  34            * @return  None 
  35            * @note    This API needs to be integrated with Timer0 interrupt subroutine.
  36            * @exmaple :Timer0_AutoReload_Interrupt_Initial(24,1000);    // Fsys is 24MHz and timer base is 1ms
  37          */
  38          #if 0   /* Interrup Vector demo */
              #if defined __C51__
              void Timer0_ISR (void) interrupt 1              // vector=0x0B 
              #elif defined __ICC8051__
              #pragma vector=0x0B                             // Interrupt 1 
              __interrupt void Timer0_ISR(void)
              #elif defined __SDCC__
              void Timer0_ISR (void) __interrupt (1)          // vector=0x0B
              #endif
C51 COMPILER V9.60.0.0   TIMER                                                             06/25/2024 11:41:59 PAGE 2   

              {
                  SFRS_TMP = SFRS;              /* for SFRS page */
                    SFRS = 0;
              /* reload counter value */
                    TH0 = TH0TMP;
                    TL0 = TL0TMP;
              /* clear flag */
                    clr_TCON_TF0;
              
                  if (SFRS_TMP)                 /* for SFRS page */
                  {
                    ENABLE_SFR_PAGE1;
                  }
              }
              #endif
  62          
  63          void Timer0_AutoReload_Interrupt_Initial(uint8_t u8SYSCLK, uint32_t u32DLYUnit)
  64          {
  65   1          TIMER0_FSYS_DIV12;                               /* T0M=0, Timer0 Clock = Fsys/12   */
  66   1          ENABLE_TIMER0_MODE1;                             /* Timer0 as 16-bits mode           */
  67   1          TIMER0CT = 65535ul-(u8SYSCLK*u32DLYUnit/12ul);
  68   1          TH0TMP = HIBYTE(TIMER0CT);
  69   1          TL0TMP = LOBYTE(TIMER0CT);
  70   1          TH0 = TH0TMP;
  71   1          TL0 = TL0TMP;
  72   1          clr_TCON_TF0;
  73   1          set_TCON_TR0;                                    /* Start Timer0 */
  74   1          ENABLE_TIMER0_INTERRUPT;                         /* Enable timer0 Interrupt */
  75   1      }
  76          
  77          void Timer0_AutoReload_Interrupt_CounterClear(void)
  78          {
  79   1          clr_TCON_TR0;
  80   1          TH0 = TH0TMP;
  81   1          TL0 = TL0TMP;
  82   1          clr_TCON_TF0;
  83   1          set_TCON_TR0;
  84   1      }
  85          /**
  86            * @brief Timer1 delay interrupt initial setting and timer 1 interrupt vector  
  87            * @param[in] u8SYSCLK define Fsys clock value base on Fsys value.
  88            *                       - \ref 24 (HIRC 24MHz )
  89            *                       - \ref 16 (HIRC 16MHz)
  90            *                       - \ref 8  (MIRC 8MHz or HIRC with clock divider)
  91            * @param[in] u6DLYUnit define delay time base is (us). 
  92            *                       - \ref value range is 100 ~ 32768.   [100us ~ 32ms ] for 24MHz
  93            *                       - \ref value range is 100 ~ 65536.   [100us ~ 65ms ] for 8MHz  (use MIRC) 
  94            *                       - \note The minimum delay value not less than 100us, the maxima value base on Fs
             -ys
  95            *                       - \example 6400 = 6.4ms.
  96            * @ref     Delay time max. value calculate = 65535 * DIV / Fsys 
  97            * @return  None 
  98            * @note    This API needs to be integrated with Timer1 interrupt subroutine.
  99            * @exmaple :Timer1_AutoReload_Interrupt_Initial(24,1000);    // Fsys is 24MHz and timer base is 1ms
 100          */
 101          #if 0
              #if defined __C51__
              void Timer1_ISR (void) interrupt 3             // vector=0x1B
              #elif defined __ICC8051__
              #pragma vector=0x1B                            // Interrupt 3
              __interrupt void Timer1_ISR(void)
              #elif defined __SDCC__
C51 COMPILER V9.60.0.0   TIMER                                                             06/25/2024 11:41:59 PAGE 3   

              void Timer1_ISR (void) __interrupt (3)         // vector=0x1B
              #endif
              { 
                  SFRS_TMP = SFRS;              /* for SFRS page */
              /* Reload counter value */
                  TH1 = TH1TMP;
                  TL1 = TL1TMP;
              /* Clear flag */
                  clr_TCON_TF1;
              
                  if (SFRS_TMP)                 /* for SFRS page */
                  {
                    ENABLE_SFR_PAGE1;
                  }
              }
              #endif
 124          
 125          void Timer1_AutoReload_Interrupt_Initial(uint8_t u8SYSCLK, uint32_t u32DLYUnit)
 126          {
 127   1          TIMER1_FSYS_DIV12;                               /* T1M=0, Timer1 Clock = Fsys/12   */
 128   1          ENABLE_TIMER1_MODE1;                             /* Timer 1 as 16-bits mode           */
 129   1          TIMER1CT = 65535ul-(u8SYSCLK*u32DLYUnit/12ul);
 130   1          TH1TMP = HIBYTE(TIMER1CT);
 131   1          TL1TMP = LOBYTE(TIMER1CT);
 132   1          TH1 = TH1TMP;
 133   1          TL1 = TL1TMP;
 134   1          clr_TCON_TF1;
 135   1          set_TCON_TR1;                                    /* Start Timer1 */
 136   1          ENABLE_TIMER1_INTERRUPT;                         /* Enable timer1 Interrupt */
 137   1      }
 138          
 139          void Timer1_AutoReload_Interrupt_CounterClear(void)
 140          {
 141   1          clr_TCON_TR1;
 142   1          TH1 = TH1TMP;
 143   1          TL1 = TL1TMP;
 144   1          clr_TCON_TF1;
 145   1          set_TCON_TR1;
 146   1      }
 147          /**
 148            * @brief Timer2 delay interrupt initial setting and timer 1 interrupt vector  
 149            * @param[in] u32SYSCLK define Fsys clock value. for example 8, use the real Fsys value.
 150            *                       - \ref 24 (HIRC 24MHz )
 151            *                       - \ref 16 (HIRC 16MHz)
 152            *                       - \ref 8  (MIRC 8MHz or HIRC with clock divider)
 153            * @param[in] u6DLYUnit define delay time base is us. the minimum delay value not less than 100us, the ma
             -xima value base on u32SYSCLK
 154            *                       - \ref  value range is 100 ~ 699050.  [100us ~ 699ms ]  for 24MHz (use HIRC)
 155            *                       - \ref  value range is 100 ~ 2097120. [100us ~ 2.1s ] for 8MHz  (use MIRC)
 156            *                       - \note The minimum delay value not less than 100us, the maxima value base on Fs
             -ys
 157            *                       - \example 6400 = 6.4ms.
 158            * @ref     Delay time max. value calculate = 65535 * DIV / Fsys 
 159            * @return  None
 160            * @note    Timer 2 divider fixed with 256.
 161            * @note    This API needs to be integrated with Timer1 interrupt subroutine.
 162            * @exmaple :  Timer2_AutoReload_Interrupt_Initial(24,105000);   // Means Fsys is 24MHz and time base is 
             -105ms
 163          */
 164          #if 0    
              #if defined __C51__
              void Timer2_ISR(void)  interrupt 5
C51 COMPILER V9.60.0.0   TIMER                                                             06/25/2024 11:41:59 PAGE 4   

              #elif defined __ICC8051__
              #pragma vector=0x2B                             /* interrupt 5 */
              __interrupt void Timer2_ISR(void)
              #elif defined __SDCC__
              void Timer2_ISR(void)  __interrupt (5)
              #endif
              {
                  SFRS_TMP = SFRS;              /* for SFRS page */
                  clr_T2CON_TF2;
              
                  if (SFRS_TMP)                 /* for SFRS page */
                  {
                    ENABLE_SFR_PAGE1;
                  }
              }
              #endif
 183          
 184          void Timer2_AutoReload_Interrupt_Initial(uint8_t u8SYSCLK, uint32_t u32DLYUnit)
 185          {
 186   1          TIMER2_AUTO_RELOAD_DELAY_MODE;
 187   1          TIMER2_DIV_256;                 /* fix divider 256 */
 188   1          TIMER2CT = 65535ul-(u8SYSCLK*u32DLYUnit/256ul);
 189   1          TH2 = HIBYTE(TIMER2CT);
 190   1          TL2 = LOBYTE(TIMER2CT);
 191   1          RCMP2H = HIBYTE(TIMER2CT);
 192   1          RCMP2L = LOBYTE(TIMER2CT);
 193   1          clr_T2CON_TF2;
 194   1          set_T2CON_TR2;                                   /* Start Timer2  */
 195   1          ENABLE_TIMER2_INTERRUPT;                         /* Enable timer2 Interrupt */
 196   1      }
 197          
 198          /**
 199            * @brief Timer3 delay interrupt initial setting and timer 1 interrupt vector  
 200            * @param[in] u8SYSCLK define Fsys clock value. for example 24, use the real Fsys value.
 201            *                       - \ref 24 (HIRC 24MHz )
 202            *                       - \ref 16 (HIRC 16MHz)
 203            *                       - \ref 8  (HIRC 8MHz or after clock divider)
 204            * @param[in] u6DLYUnit define delay time base is (us). 
 205            *                       - \ref value range is 100 ~ 349525 for 24MHz (use HIRC) 
 206            *                       - \note The minimum delay value not less than 100us, the maxima value base on Fs
             -ys
 207            *                       - \example 6400 = 6.4ms.
 208            * @ref     Delay time max. value calculate = 65535 * DIV / Fsys 
 209            * @return  None
 210            * @note    Timer3 divider fixed with 128. 
 211            * @note    This API needs to be integrated with Timer1 interrupt subroutine.
 212            * @exmaple :  Timer3_AutoReload_Interrupt_Initial(24,105000);   // Means Fsys is 24MHz and time base is 
             -105ms
 213          */
 214          #if 0
              #if defined __C51__
              void Timer3_ISR(void)     interrupt  16
              #elif defined __ICC8051__
              #pragma vector=0x83                             /* interrupt 16 */
              __interrupt void Timer3_ISR(void)
              #elif defined __SDCC__
              void Timer3_ISR(void)   __interrupt  (16)
              #endif
              {
                  SFRS_TMP = SFRS;              /* for SFRS page */
                  clr_T3CON_TF3;
              
C51 COMPILER V9.60.0.0   TIMER                                                             06/25/2024 11:41:59 PAGE 5   

                  if (SFRS_TMP)                 /* for SFRS page */
                  {
                    ENABLE_SFR_PAGE1;
                  }
              }
              #endif 
 233          
 234          void Timer3_AutoReload_Interrupt_Initial(uint8_t u8SYSCLK, uint32_t u32DLYUnit)
 235          {
 236   1          SFRS = 0;
 237   1          TIMER3_DIV_128;                                   /*  Timer 3 divider fixed with 128.*/
 238   1          TIMER2CT = 65535ul-(u8SYSCLK*u32DLYUnit/128ul);
 239   1          TIMER2CT &= 0xFFFF;
 240   1          RH3 = HIBYTE(TIMER2CT);
 241   1          RL3 = LOBYTE(TIMER2CT);
 242   1          clr_T3CON_TF3;
 243   1          set_T3CON_TR3;                                   /* Trigger Timer3  */
 244   1          ENABLE_TIMER3_INTERRUPT;                         /* Enable timer3 Interrupt */
 245   1      }
 246          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    464    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      20
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     20    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
