C51 COMPILER V9.60.0.0   ISP_UART1                                                         06/25/2024 11:39:33 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE ISP_UART1
OBJECT MODULE PLACED IN .\Output\isp_uart1.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\isp_uart1.c LARGE OMF2 ROM(COMPACT) OPTIMIZE(7,SPEED) BROWSE INCDIR(.
                    -.\..\..\..\Library\Device\Include;..\..\..\..\Library\StdDriver\inc;..\include) DEBUG PRINT(.\LST\isp_uart1.lst) TABS(2)
                    - OBJECT(.\Output\isp_uart1.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* SPDX-License-Identifier: Apache-2.0                                                                    
             - */
   4          /* Copyright(c) 2024 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   5          /*                                                                                                        
             - */
   6          /*--------------------------------------------------------------------------------------------------------
             --*/
   7          #include "numicro_8051.h"
   8          #include "isp_uart1.h"
   9          
  10          BIT volatile bUartDataReady;
  11          BIT volatile g_timer0Over;
  12          BIT volatile g_timer1Over;
  13          BIT volatile g_progarmflag;
  14          BIT BIT_TMP;
  15          
  16          #if defined __C51__
  17          xdata volatile uint8_t uart_rcvbuf[64];
  18          xdata volatile uint8_t uart_txbuf[64];
  19          data volatile uint8_t bufhead;
  20          data volatile uint16_t flash_address;
  21          data volatile uint16_t AP_size;
  22          data volatile uint8_t g_timer1Counter;
  23          data volatile uint8_t count;
  24          data volatile uint16_t g_timer0Counter;
  25          data volatile uint32_t g_checksum;
  26          data volatile uint32_t g_totalchecksum;
  27          data uint8_t PID_highB,PID_lowB,DID_highB,DID_lowB,CONF0,CONF1,CONF2,CONF4;
  28          data uint8_t recv_CONF0,recv_CONF1,recv_CONF2,recv_CONF4;
  29          data uint8_t hircmap0,hircmap1;
  30          
  31          #elif defined __ICC8051__
              __xdata volatile uint8_t uart_rcvbuf[64];
              __xdata volatile uint8_t uart_txbuf[64];
              __data volatile uint8_t bufhead;
              __data volatile uint16_t flash_address;
              __data volatile uint16_t AP_size;
              __data volatile uint8_t g_timer1Counter;
              __data volatile uint8_t count;
              __data volatile uint16_t g_timer0Counter;
              __data volatile uint32_t g_checksum;
              __data volatile uint32_t g_totalchecksum;
              __data uint8_t PID_highB,PID_lowB,DID_highB,DID_lowB,CONF0,CONF1,CONF2,CONF4;
              __data uint8_t recv_CONF0,recv_CONF1,recv_CONF2,recv_CONF4;
              __data uint8_t hircmap0,hircmap1;
              
              #elif defined __SDCC__
              __xdata volatile uint8_t uart_rcvbuf[64];
C51 COMPILER V9.60.0.0   ISP_UART1                                                         06/25/2024 11:39:33 PAGE 2   

              __xdata volatile uint8_t uart_txbuf[64];
              __data volatile uint8_t bufhead;
              __data volatile uint16_t flash_address;
              __data volatile uint16_t AP_size;
              __data volatile uint8_t g_timer1Counter;
              __data volatile uint8_t count;
              __data volatile uint16_t g_timer0Counter;
              __data volatile uint32_t g_checksum;
              __data volatile uint32_t g_totalchecksum;
              __data uint8_t PID_highB,PID_lowB,DID_highB,DID_lowB,CONF0,CONF1,CONF2,CONF4;
              __data uint8_t recv_CONF0,recv_CONF1,recv_CONF2,recv_CONF4;
              __data uint8_t hircmap0,hircmap1;
              #endif
  61          
  62          
  63          void MODIFY_HIRC_24(void)
  64          {
  65   1      
  66   1              IAPAL = 0x38;
  67   1              IAPAH = 0x00;
  68   1              IAPCN = READ_UID;
  69   1              set_IAPTRG_IAPGO;
  70   1              hircmap0 = IAPFD;
  71   1              IAPAL = 0x39;
  72   1              IAPAH = 0x00;
  73   1              set_IAPTRG_IAPGO;
  74   1              hircmap1 = IAPFD;
  75   1      
  76   1              TA=0XAA;
  77   1              TA=0X55;
  78   1              RCTRIM0 = hircmap0;
  79   1              TA=0XAA;
  80   1              TA=0X55;
  81   1              RCTRIM1 = hircmap1;
  82   1      //        clr_CHPCON_IAPEN;
  83   1      }
  84          
  85          void MODIFY_HIRC_16(void)
  86          {
  87   1          IAPAL = 0x30;
  88   1          IAPAH = 0x00;
  89   1          IAPCN = READ_UID;
  90   1          set_IAPTRG_IAPGO;
  91   1          hircmap0 = IAPFD;
  92   1          IAPAL = 0x31;
  93   1          IAPAH = 0x00;
  94   1          set_IAPTRG_IAPGO;
  95   1          hircmap1 = IAPFD;
  96   1      
  97   1          TA=0XAA;
  98   1          TA=0X55;
  99   1          RCTRIM0 = hircmap0;
 100   1          TA=0XAA;
 101   1          TA=0X55;
 102   1          RCTRIM1 = hircmap1;
 103   1      }
 104          
 105          void READ_ID(void)
 106          {
 107   1          IAPCN = READ_DID;
 108   1          IAPAH = 0x00;
 109   1          IAPAL = 0x00;
C51 COMPILER V9.60.0.0   ISP_UART1                                                         06/25/2024 11:39:33 PAGE 3   

 110   1          set_IAPTRG_IAPGO;
 111   1          DID_lowB = IAPFD;
 112   1          IAPAL = 0x01;
 113   1          set_IAPTRG_IAPGO;
 114   1          DID_highB = IAPFD;
 115   1          IAPAL = 0x02;
 116   1          set_IAPTRG_IAPGO;
 117   1          PID_lowB = IAPFD;
 118   1          IAPAL = 0x03;
 119   1          set_IAPTRG_IAPGO;
 120   1          PID_highB = IAPFD;
 121   1      }
 122          void READ_CONFIG(void)
 123          {
 124   1          IAPCN = BYTE_READ_CONFIG;
 125   1          IAPAL = 0x00;
 126   1          IAPAH = 0x00;
 127   1          set_IAPTRG_IAPGO;
 128   1          CONF0 = IAPFD;
 129   1          IAPAL = 0x01;
 130   1          set_IAPTRG_IAPGO;
 131   1          CONF1 = IAPFD;
 132   1          IAPAL = 0x02;
 133   1          set_IAPTRG_IAPGO;
 134   1          CONF2 = IAPFD;
 135   1          IAPAL = 0x04;
 136   1          set_IAPTRG_IAPGO;
 137   1          CONF4 = IAPFD;
 138   1      //    clr_CHPCON_IAPEN;
 139   1      }
 140          
 141          void TM0_ini(void)
 142          {    
 143   1        TH0=TL0=0;    //interrupt timer 140us
 144   1        set_TCON_TR0;      //Start timer0
 145   1        set_IPH_PSH;       // Serial port 0 interrupt level2
 146   1        set_IE_ET0;
 147   1      }
 148          
 149          
 150          void UART1_ini_115200_24MHz(void)
 151          {
 152   1          P16_QUASI_MODE;                                  
 153   1          P02_INPUT_MODE;
 154   1        
 155   1          SCON_1 = 0x50;           /*UART1 Mode1,REN_1=1 */
 156   1          T3CON = 0x88;           /*T3PS2=0,T3PS1=0,T3PS0=0(Prescale=1), UART1 in MODE 1*/
 157   1          clr_T3CON_BRCK;
 158   1          RH3    = HIBYTE(65536 - 13);;
 159   1          RL3    = LOBYTE(65536 - 13);
 160   1          set_T3CON_TR3;             //Trigger Timer3 
 161   1          set_EIE1_ES_1;
 162   1          EA=1;
 163   1      }
 164          
 165          
 166          void Package_checksum(void)
 167          {
 168   1          uint8_t   vo8temp;
 169   1        g_checksum=0;
 170   1         for(count=0;count<64;count++)
 171   1        {
C51 COMPILER V9.60.0.0   ISP_UART1                                                         06/25/2024 11:39:33 PAGE 4   

 172   2          vo8temp = uart_rcvbuf[count];
 173   2          g_checksum += vo8temp;    
 174   2        }
 175   1        uart_txbuf[0]=g_checksum&0xff;
 176   1        uart_txbuf[1]=(g_checksum>>8)&0xff;
 177   1        uart_txbuf[4]=uart_rcvbuf[4]+1;
 178   1        uart_txbuf[5]=uart_rcvbuf[5];
 179   1        if(uart_txbuf[4]==0x00)
 180   1        uart_txbuf[5]++;
 181   1        
 182   1      }
 183          
 184          
 185          void Send_64byte_To_UART1(void)
 186          {
 187   1        SFRS=0;
 188   1         for(count=0;count<64;count++)
 189   1        {
 190   2           TI_1 = 0;  
 191   2          SBUF_1 = uart_txbuf[count];
 192   2          while(TI_1==0);
 193   2        }
 194   1      }
 195          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    633    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    128    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     31    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
