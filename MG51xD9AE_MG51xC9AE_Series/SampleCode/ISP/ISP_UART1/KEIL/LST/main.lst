C51 COMPILER V9.60.0.0   MAIN                                                              06/25/2024 11:39:33 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\main.c LARGE OMF2 ROM(COMPACT) OPTIMIZE(7,SPEED) BROWSE INCDIR(..\..\
                    -..\..\Library\Device\Include;..\..\..\..\Library\StdDriver\inc;..\include) DEBUG PRINT(.\LST\main.lst) TABS(2) OBJECT(.\
                    -Output\main.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* SPDX-License-Identifier: Apache-2.0                                                                    
             - */
   4          /* Copyright(c) 2024 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   5          /*                                                                                                        
             - */
   6          /*--------------------------------------------------------------------------------------------------------
             --*/
   7          #include "numicro_8051.h"
   8          #include "isp_uart1.h"
   9          
  10          
  11          /******************************
  12            * @brief     UART1 interrupt.
  13            * @param[in] None.
  14            * @return    None.
  15          ******************************/
  16          #if defined __C51__
  17          void UART1_ISR(void) interrupt 15
  18          #elif defined __ICC8051__
              #pragma vector=0x7B
              __interrupt void UART1_ISR(void)
              #elif defined __SDCC__
              void UART1_ISR(void) __interrupt (15)
              #endif
  24          {
  25   1          uint8_t   vo8temp;
  26   1      
  27   1          SFRS=0;
  28   1          if (RI_1 == 1)
  29   1          {
  30   2            vo8temp =  SBUF_1; 
  31   2            uart_rcvbuf[bufhead++] = vo8temp;
  32   2            clr_SCON_1_RI_1;                                         // Clear RI (Receive Interrupt).
  33   2          }
  34   1          if (TI_1 == 1)
  35   1          {
  36   2              clr_SCON_1_TI_1;                                         // Clear TI (Transmit Interrupt).
  37   2          }
  38   1          if(bufhead ==1)
  39   1          {
  40   2            g_timer1Over=0;
  41   2            g_timer1Counter=90; //for check uart timeout using
  42   2          }
  43   1        if(bufhead == 64)
  44   1          {
  45   2            bUartDataReady = TRUE;
  46   2            g_timer1Counter=0;
  47   2            g_timer1Over=0;
C51 COMPILER V9.60.0.0   MAIN                                                              06/25/2024 11:39:33 PAGE 2   

  48   2            bufhead = 0;
  49   2          }
  50   1      }
  51          
  52          /******************************
  53            * @brief     Timer0 interrupt.
  54            * @param[in] None.
  55            * @return    None.
  56          ******************************/
  57          #if defined __C51__
  58          void Timer0_ISR (void) interrupt 1
  59          #elif defined __ICC8051__
              #pragma vector=0x0B
              __interrupt void Timer0_ISR(void)
              #elif defined __SDCC__
              void Timer0_ISR (void) __interrupt (1)
              #endif
  65          {
  66   1      
  67   1      if(g_timer0Counter)
  68   1        {
  69   2        g_timer0Counter--;
  70   2          if(!g_timer0Counter)
  71   2          {
  72   3          g_timer0Over=1;
  73   3          }
  74   2        }
  75   1      
  76   1        if(g_timer1Counter)
  77   1        {
  78   2        g_timer1Counter--;
  79   2          if(!g_timer1Counter)
  80   2          {
  81   3          g_timer1Over=1;
  82   3          }
  83   2        }
  84   1      }
  85          
  86          /******************************
  87            * @brief     Main loop.
  88            * @param[in] None.
  89            * @return    None.
  90          ******************************/
  91          void main (void)
  92          {
  93   1        uint8_t   vo8temp;
  94   1        uint16_t  vo16temp;
  95   1          set_CHPCON_IAPEN;
  96   1          MODIFY_HIRC_24();
  97   1          UART1_ini_115200_24MHz();
  98   1         //uart initial for ISP programmer GUI, always use 115200 baudrate
  99   1          TM0_ini();
 100   1      
 101   1          g_timer0Over=0;
 102   1          g_timer0Counter=5000;
 103   1          g_progarmflag=0;
 104   1      
 105   1      while(1)
 106   1      {
 107   2              if(bUartDataReady == TRUE)
 108   2              {
 109   3                EA=0; //DISABLE ALL INTERRUPT
C51 COMPILER V9.60.0.0   MAIN                                                              06/25/2024 11:39:33 PAGE 3   

 110   3                if(g_progarmflag==1)
 111   3                {
 112   4                  for(count=8;count<64;count++)
 113   4                  {
 114   5                    IAPCN = BYTE_PROGRAM_AP;          //program byte
 115   5                    IAPAL = flash_address&0xff;
 116   5                    IAPAH = (flash_address>>8)&0xff;
 117   5                    IAPFD=uart_rcvbuf[count];
 118   5                    trig_IAPGO;
 119   5                
 120   5                    IAPCN = BYTE_READ_AP;              //program byte verify
 121   5                    trig_IAPGO;
 122   5                    vo8temp = uart_rcvbuf[count];
 123   5                    if(IAPFD!=vo8temp)
 124   5                    while(1);                          
 125   5                    if (CHPCON==0x43)              //if error flag set, program error stop ISP
 126   5                    while(1);
 127   5                    
 128   5                    g_totalchecksum += vo8temp;
 129   5                    flash_address++;
 130   5                    vo16temp = AP_size;
 131   5                    if(flash_address==vo16temp)
 132   5                    {
 133   6                      g_progarmflag=0;
 134   6                      g_timer0Over =1;
 135   6                      goto END_2;
 136   6                    }
 137   5                  } 
 138   4      END_2:                
 139   4                  Package_checksum();
 140   4                  uart_txbuf[8]=g_totalchecksum&0xff;
 141   4                  uart_txbuf[9]=(g_totalchecksum>>8)&0xff;
 142   4                  Send_64byte_To_UART1();
 143   4                  
 144   4                }
 145   3                  
 146   3                switch(uart_rcvbuf[0])
 147   3                {                
 148   4                  case CMD_CONNECT:
 149   4                  case CMD_SYNC_PACKNO:
 150   4                  {
 151   5                    Package_checksum();
 152   5                    Send_64byte_To_UART1();    
 153   5                    g_timer0Counter=0; //clear timer 0 for no reset
 154   5                    g_timer0Over=0;
 155   5                  break;
 156   5                  }
 157   4      
 158   4                  case CMD_GET_FWVER:
 159   4                  {
 160   5                    Package_checksum();
 161   5                    uart_txbuf[8]=FW_VERSION;
 162   5                    Send_64byte_To_UART1();  
 163   5                  break;
 164   5                  }
 165   4                  case CMD_RUN_APROM:
 166   4                  {
 167   5                    goto _APROM;
 168   5                  break;
 169   5                  }
 170   4      
 171   4                  //please for ISP programmer GUI, ID always use following rule to transmit.
C51 COMPILER V9.60.0.0   MAIN                                                              06/25/2024 11:39:33 PAGE 4   

 172   4                  case CMD_GET_DEVICEID:            
 173   4                  {
 174   5                    READ_ID();
 175   5                    Package_checksum();
 176   5                    uart_txbuf[8]=DID_lowB;  
 177   5                    uart_txbuf[9]=DID_highB;  
 178   5                    uart_txbuf[10]=PID_lowB;  
 179   5                    uart_txbuf[11]=PID_highB;  
 180   5                    Send_64byte_To_UART1();  
 181   5                    break;
 182   5                  }
 183   4                  case CMD_ERASE_ALL:
 184   4                  {
 185   5                    set_IAPUEN_APUEN;
 186   5                    IAPFD = 0xFF;          //Erase must set IAPFD = 0xFF
 187   5                    IAPCN = PAGE_ERASE_AP;
 188   5                    
 189   5                    for(flash_address=0x0000;flash_address<APROM_SIZE/PAGE_SIZE;flash_address++)
 190   5                    {        
 191   6                      IAPAL = LOBYTE(flash_address*PAGE_SIZE);
 192   6                      IAPAH = HIBYTE(flash_address*PAGE_SIZE);
 193   6                      trig_IAPGO;
 194   6                    }            
 195   5                    
 196   5                    Package_checksum();
 197   5                    Send_64byte_To_UART1();  
 198   5                    break;
 199   5                  }
 200   4                  case CMD_READ_CONFIG:
 201   4                  {
 202   5                    READ_CONFIG();
 203   5                    Package_checksum();
 204   5                    uart_txbuf[8]=CONF0;  
 205   5                    uart_txbuf[9]=CONF1;  
 206   5                    uart_txbuf[10]=CONF2;  
 207   5                    uart_txbuf[11]=0xff;  
 208   5                    uart_txbuf[12]=CONF4;  
 209   5                    uart_txbuf[13]=0xff;  
 210   5                    uart_txbuf[14]=0xff;            
 211   5                    uart_txbuf[15]=0xff;
 212   5                    Send_64byte_To_UART1();  
 213   5                  break;
 214   5                  }
 215   4                  
 216   4                  case CMD_UPDATE_CONFIG:
 217   4                  {
 218   5                    recv_CONF0 = uart_rcvbuf[8];
 219   5                    recv_CONF1 = uart_rcvbuf[9];
 220   5                    recv_CONF2 = uart_rcvbuf[10];
 221   5                    recv_CONF4 = uart_rcvbuf[12];
 222   5      /*Erase CONFIG */              
 223   5      //              set_CHPCON_IAPEN;
 224   5                    set_IAPUEN_CFUEN;
 225   5                    IAPCN = PAGE_ERASE_CONFIG;
 226   5                    IAPAL = 0x00;
 227   5                    IAPAH = 0x00;
 228   5                    IAPFD = 0xFF;
 229   5                    trig_IAPGO;
 230   5      /*Program CONFIG*/  
 231   5                    IAPCN = BYTE_PROGRAM_CONFIG;
 232   5                    IAPAL = 0x00;
 233   5                    IAPAH = 0x00;
C51 COMPILER V9.60.0.0   MAIN                                                              06/25/2024 11:39:33 PAGE 5   

 234   5                    IAPFD = recv_CONF0;
 235   5                    trig_IAPGO;
 236   5                    IAPFD = recv_CONF1;
 237   5                    IAPAL = 0x01;
 238   5                    trig_IAPGO;
 239   5                    IAPAL = 0x02;
 240   5                    IAPFD = recv_CONF2;
 241   5                    trig_IAPGO;
 242   5                    IAPAL = 0x04;
 243   5                    IAPFD = recv_CONF4;
 244   5                    trig_IAPGO;
 245   5                    clr_IAPUEN_CFUEN;
 246   5      /*Read new CONFIG*/  
 247   5                    READ_CONFIG();
 248   5                    
 249   5                    Package_checksum();
 250   5                    uart_txbuf[8]=CONF0;  
 251   5                    uart_txbuf[9]=CONF1;  
 252   5                    uart_txbuf[10]=CONF2;  
 253   5                    uart_txbuf[11]=0xff;  
 254   5                    uart_txbuf[12]=CONF4;  
 255   5                    uart_txbuf[13]=0xff;  
 256   5                    uart_txbuf[14]=0xff;            
 257   5                    uart_txbuf[15]=0xff;
 258   5                    Send_64byte_To_UART1();  
 259   5                    break;
 260   5                  }
 261   4                  
 262   4                  case CMD_UPDATE_APROM:            
 263   4                  {
 264   5      //              set_CHPCON_IAPEN;
 265   5                    set_IAPUEN_APUEN;
 266   5                    IAPFD = 0xFF;          //Erase must set IAPFD = 0xFF
 267   5                    IAPCN = PAGE_ERASE_AP;
 268   5                    
 269   5                    for(flash_address=0x0000;flash_address<APROM_SIZE/PAGE_SIZE;flash_address++)
 270   5                    {        
 271   6                      IAPAL = LOBYTE(flash_address*PAGE_SIZE);
 272   6                      IAPAH = HIBYTE(flash_address*PAGE_SIZE);
 273   6                      trig_IAPGO;
 274   6                    }            
 275   5                    
 276   5                    g_totalchecksum=0;
 277   5                    flash_address=0;
 278   5                    AP_size=0;
 279   5                    AP_size=uart_rcvbuf[12];
 280   5                    vo8temp = uart_rcvbuf[13]; 
 281   5                    AP_size|=(vo8temp<<8);  
 282   5                    g_progarmflag=1;
 283   5      
 284   5                    for(count=16;count<64;count++)
 285   5                    {
 286   6                      IAPCN = BYTE_PROGRAM_AP;
 287   6                      IAPAL = flash_address&0xff;
 288   6                      IAPAH = (flash_address>>8)&0xff;
 289   6                      IAPFD=uart_rcvbuf[count];
 290   6                      clr_CHPCON_IAPFF;
 291   6                      trig_IAPGO;                              
 292   6            
 293   6                      IAPCN = BYTE_READ_AP;                //program byte verify
 294   6                      trig_IAPGO;
 295   6                      vo8temp = uart_rcvbuf[count];
C51 COMPILER V9.60.0.0   MAIN                                                              06/25/2024 11:39:33 PAGE 6   

 296   6                      if(IAPFD!=vo8temp)
 297   6                      while(1);
 298   6                      if (CHPCON==0x43)                //if error flag set, program error stop ISP
 299   6                      while(1);
 300   6                      
 301   6                      g_totalchecksum += vo8temp;
 302   6                      flash_address++;
 303   6                      vo16temp = AP_size;
 304   6                      if(flash_address==vo16temp)
 305   6                      {
 306   7                        g_progarmflag=0;
 307   7                         goto END_1;          
 308   7                      }
 309   6                    }
 310   5      END_1:                
 311   5                    Package_checksum();
 312   5                    uart_txbuf[8]=g_totalchecksum&0xff;
 313   5                    uart_txbuf[9]=(g_totalchecksum>>8)&0xff;
 314   5                    Send_64byte_To_UART1();  
 315   5                    break;
 316   5                  }
 317   4                }  
 318   3                bUartDataReady = FALSE;
 319   3                bufhead = 0;            
 320   3                EA=1;
 321   3            }
 322   2            //For connect timer out  
 323   2            if(g_timer0Over==1)
 324   2            {       
 325   3             goto _APROM;
 326   3            }
 327   2            
 328   2            //for uart time out or buffer error
 329   2             if(g_timer1Over==1)
 330   2            {       
 331   3             if((bufhead<64)&&(bufhead>0)||(bufhead>64))
 332   3               {
 333   4               bufhead=0;         
 334   4               }
 335   3            }  
 336   2      }   
 337   1      
 338   1      
 339   1      _APROM:
 340   1          MODIFY_HIRC_16();
 341   1          clr_CHPCON_IAPEN;
 342   1          TA = 0xAA;
 343   1          TA = 0x55;
 344   1          CHPCON = 0x00;                  //set boot from AP
 345   1          TA = 0xAA;
 346   1          TA = 0x55;
 347   1          CHPCON = 0x80;                   //software reset enable
 348   1      
 349   1          /* Trap the CPU */
 350   1          while(1);  
 351   1      }
 352          
 353          
 354          
 355          


C51 COMPILER V9.60.0.0   MAIN                                                              06/25/2024 11:39:33 PAGE 7   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1215    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
